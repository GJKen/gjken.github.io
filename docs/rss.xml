<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>GJKen</title><link>https://gjken.github.io</link><description> </description><copyright>GJKen</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://s2.loli.net/2024/11/13/DNHrdGTfphzQOok.webp</url><title>avatar</title><link>https://gjken.github.io</link></image><lastBuildDate>Thu, 06 Mar 2025 07:47:37 +0000</lastBuildDate><managingEditor>GJKen</managingEditor><ttl>60</ttl><webMaster>GJKen</webMaster><item><title>Desktop Meta - 桌面3D模型宠物</title><link>https://gjken.github.io/post/13.html</link><description># 前言&#13;
&#13;
分享 DLC 版本以及自定义 mod 教程.&#13;
&#13;
# 安装 MelonLoader&#13;
&#13;
官方 Wiki 👉 https://melonwiki.xyz&#13;
&#13;
&gt; [!NOTE]&#13;
&gt; 安装注意需要运行库`.NET 6.0 Desktop Runtime`&#13;
&#13;
## 下载程序&#13;
&#13;
网页往下滑即可看到.&#13;
&#13;
![3](https://github.com/user-attachments/assets/0c54f714-4b52-4c95-9aa4-820397216d07)&#13;
&#13;
## 选择程序主体&#13;
&#13;
这里我选择自己使用的破解版 DLC 程序🤭.&#13;
&#13;
![1](https://github.com/user-attachments/assets/9b5e0421-f960-4f1c-aad5-73e11acfd8ac)&#13;
&#13;
选择好之后点击 Install 就行, 我安装时的版本是`0.6.6`&#13;
&#13;
安装完成即可关闭它.&#13;
&#13;
![2](https://github.com/user-attachments/assets/299aa50e-bba9-45de-a3a1-3842cfd72ca8)&#13;
&#13;
## 下载 desktopmate-custom-avatar-loader&#13;
&#13;
去 release 找到最新的文件并下载解压它 👉 [Github Release](https://github.com/YusufOzmen01/desktopmate-custom-avatar-loader/releases), 直接解压到 Desktop Meta 目录里面即可.&#13;
&#13;
&gt; 本人当时使用`1.0.3`版本&#13;
&#13;
![1](https://github.com/user-attachments/assets/f2bd1cb9-9127-481d-b269-6417b271be19)&#13;
&#13;
完成后直接运行`DesktopMate.exe`, 此时会出现一个黑窗口, 不要慌, 等待3d小人出现即可&#13;
&#13;
&gt; 这里我第一次运行出了bug..., 重开来了第二次才好.&#13;
&#13;
## 模型网站 VRoid Hub&#13;
&#13;
地址👉 https://hub.vroid.com&#13;
&#13;
&gt; [!IMPORTANT]&#13;
&gt; 下载模型需要拥有 Pixiv 账号!&#13;
&#13;
进入模型网站后, 选择一个喜欢的模型, 下载`.vrm`格式的文件.&#13;
&#13;
然后启动小人的时候按`F4`, 会弹出窗口让你选择文件, 这时选择刚刚下载的 vrm 文件就能使用模型了, 下次启动程序也会保持之前选择的模型.&#13;
&#13;
&#13;
&#13;
# 可能会遇到的问题&#13;
&#13;
1. 模型不兼容.&#13;
&#13;
2. 当 vrm 模型上次使用过, 文件被移动位置&amp;重命名启动软件会报错.。</description><guid isPermaLink="true">https://gjken.github.io/post/13.html</guid><pubDate>Sat, 11 Jan 2025 15:54:32 +0000</pubDate></item><item><title>AssetRipper - 开源的 Unity 游戏资源提取工具</title><link>https://gjken.github.io/post/12.html</link><description># 简介&#13;
&#13;
AssetRipper 是一个强大的开源工具, 它旨在帮助开发者和爱好者从 Unity 序列化文件(.cab-, .assets, .sharedAssets)以及资产包(.unity3d, .bundle)中提取原始数据, 并将其转换为 Unity 引擎可识别的本机格式.&#13;
&#13;
无论你是想要深入研究游戏内部机制, 还是进行游戏模组开发, AssetRipper 都是一个不可或缺的助手.&#13;
&#13;
# 地址&#13;
&#13;
Github: https://github.com/AssetRipper/AssetRipper&#13;
&#13;
下载地址: https://assetripper.github.io/AssetRipper/articles/Downloads.html&#13;
&#13;
# 使用&#13;
&#13;
1. [Releases](https://github.com/AssetRipper/AssetRipper/releases) 下载.&#13;
&#13;
2. 双击解压后的 `AssetRipper.exe` 文件启动程序, 会开启本地服务, 同时到浏览器打开.。</description><guid isPermaLink="true">https://gjken.github.io/post/12.html</guid><pubDate>Mon, 06 Jan 2025 08:14:43 +0000</pubDate></item><item><title>图片超分 - Real-ESRGAN GUI</title><link>https://gjken.github.io/post/11.html</link><description># 简介

这个程序是 Real-ESRGAN 的命令行程序 Real-ESRGAN-ncnn-vulkan 的图形界面, 使用 Python 和 tkinter 编写, 同时支持 Windows、Ubuntu 和 macOS 平台.

# 地址

https://github.com/TransparentLC/realesrgan-gui

# 图示

![](https://github.com/user-attachments/assets/ac50157c-33ce-40cb-8a65-97a0086797e9)。</description><guid isPermaLink="true">https://gjken.github.io/post/11.html</guid><pubDate>Mon, 06 Jan 2025 08:12:58 +0000</pubDate></item><item><title>翻墙服务端和客户端 - 使用记录</title><link>https://gjken.github.io/post/10.html</link><description>**记录翻墙软件使用记录**&#13;
&#13;
# 不同客户端汇总&#13;
&#13;
## Windows&#13;
&#13;
| Name&#13;
|-&#13;
| [Mihomo Party](#mihomo-party)&#13;
| [Nekoray](#windows(nekoray))&#13;
&#13;
## Android&#13;
&#13;
| Name&#13;
|-&#13;
| [NekoBox](#android(nekobox))&#13;
&#13;
# Nekoray&#13;
&#13;
Nekoray 含 Windows 和 Andorid 版本.&#13;
&#13;
[官网](https://matsuridayo.github.io)&#13;
&#13;
## Windows(Nekoray)&#13;
&#13;
[Github](https://github.com/MatsuriDayo/nekoray)&#13;
&#13;
## Android(NekoBox)&#13;
&#13;
[Github](https://github.com/MatsuriDayo/NekoBoxForAndroid)&#13;
&#13;
# Mihomo Party&#13;
&#13;
所有订阅以及配置文件都备份到了 webdav 里, 在不同地方使用软件时可一键恢复配置, 非常方便.&#13;
&#13;
[官网](https://github.com/mihomo-party-org/mihomo-party)&#13;
&#13;
## 图示&#13;
&#13;
![](https://raw.githubusercontent.com/mihomo-party-org/mihomo-party/refs/heads/master/images/preview.jpg)&#13;
&#13;
## 覆写脚本&#13;
&#13;
&gt; 引用自 [Linux.do](https://linux.do/t/topic/229208)&#13;
&#13;
https://github.com/GJKen/clash-Rules/blob/main/Src/Mihomo%20%E8%A6%86%E5%86%99%E8%A7%84%E5%88%99.js。</description><guid isPermaLink="true">https://gjken.github.io/post/10.html</guid><pubDate>Mon, 06 Jan 2025 08:12:24 +0000</pubDate></item><item><title>Cloudflare Web Analytics 的 beacon.min.js 加载缓慢, 记录它的关闭方法</title><link>https://gjken.github.io/post/9.html</link><description>Cloudflare Web Analytics CDN 国内加载缓慢的解决方法.

# 前言

最近在访问博客的时候发现个别js加载失败, 检查发现原来是 CloudFlare 的 beacon.min.js 加载失败, 如下图.

卡顿文件👉`https://static.cloudflareinsights.com/beacon.min.js`

随后在网上找了点教程关闭它.

&gt; 引用来源 [ruimian](https://www.ruimian.com/cloudflare-web-analytics-slow-loading)

## Cloudflare 官方解释:

&gt; [!TIP]
&gt; Cloudflare Web Analytics功能, 为您的网站提供免费的隐私优先分析, 无需更改 DNS 或使用 Cloudflare 的代理. Cloudflare Web Analytics 可帮助您了解网站访问者体验到的网页性能. 启用 Cloudflare Web Analytics 所需的只是您的页面上的 Cloudflare 帐户和 JavaScript 代码片段, 即可开始获取有关页面浏览量和访问者的信息. JavaScript 代码片段(也称为信标)使用 Performance API 收集指标, 该 API 可在所有主流 Web 浏览器中使用.Web Analytics 支持自适应比特率 (ABR).
&gt; 
&gt; Cloudflare 的服务器将根据数据大小、日期范围、网络连接和其他因素为每个图表或表格选择最佳分辨率.有关更多信息, 请参阅解释 Cloudflare 的 ABR Analytics.
&gt; 
&gt; Web Analytics 显示的数据为真实用户监控 (RUM), 更多信息请参考真实用户监控.
&gt; 
&gt; Cloudflare Web Analytics 不会收集或使用您的访客的个人数据.

# 关闭步骤

1. 选择需要管理的站点.

![](https://github.com/user-attachments/assets/2eaa849a-f41c-4323-9f7e-dbbfa84d6a1d)

2. 展开高级选项后点击删除即可.

![](https://github.com/user-attachments/assets/4d1540a0-512d-4917-a0d5-a1b2454de6e5)

设置完成后等 5 分钟后强制刷新网站, 就没有这个 js 的加载了.。</description><guid isPermaLink="true">https://gjken.github.io/post/9.html</guid><pubDate>Mon, 06 Jan 2025 08:11:45 +0000</pubDate></item><item><title>Github Markdown 使用笔记</title><link>https://gjken.github.io/post/8.html</link><description>&gt; [!NOTE]&#13;
&gt; Markdown 是一种轻量级标记语言, 它允许人们使用易读易写的纯文本格式编写文档, 然后转换成结构化的 HTML 代码. Markdown 语法简单, 但功能强大, 广泛应用于博客、笔记、文档编写等方面.  &#13;
&#13;
以下是 Markdown 的一些常用语法:&#13;
&#13;
## 标题&#13;
&#13;
在文字前面加上`#`表示标题, 然后`# `与文字之间用空格隔开,`#` 的数量表示标题的级别:&#13;
&#13;
```md&#13;
# 一级标题&#13;
## 二级标题&#13;
### 三级标题&#13;
#### 四级标题&#13;
##### 五级标题&#13;
###### 六级标题&#13;
```&#13;
&#13;
## 强调&#13;
&#13;
-   _斜体_ :将文字两边各加上一个 `*` 或 `_`.&#13;
-   **粗体**:将文字两边各加上两个 `*` 或 `_`.&#13;
-   _**粗斜体**_:将文字两边各加上三个 `*` 或 `_`.&#13;
&#13;
## 列表&#13;
&#13;
-   无序列表:使用 `*`、`+` 或 `-` 加上一个空格.&#13;
-   有序列表:使用数字加点加空格.&#13;
&#13;
## 任务列表&#13;
&#13;
任务列表是一组任务，每个任务都在单独的行上呈现，带有可点击的复选框。</description><guid isPermaLink="true">https://gjken.github.io/post/8.html</guid><pubDate>Mon, 06 Jan 2025 08:09:11 +0000</pubDate></item><item><title>正则表达式 - 使用记录</title><link>https://gjken.github.io/post/7.html</link><description>&gt; [!NOTE]&#13;
&gt; GPT帮写最方便.&#13;
&#13;
# 匹配关键字并删除指定行&#13;
&#13;
`^.*关键字.*\r?\n`&#13;
&#13;
# 匹配8位任意字母和数字, 并用方括号包裹&#13;
&#13;
&gt; 用于动漫bt重命名&#13;
&#13;
`\[[A-Za-z0-9]{8}\]`&#13;
&#13;
# 查找换行并增加空行, 增加空行同时填写内容, 最后再换行&#13;
&#13;
&gt; [MusicPlayer2](https://github.com/zhongyang219/MusicPlayer2) 歌单转 [poweramp](https://powerampapp.com/zh_tw/) 歌单编写时需要用到&#13;
&#13;
查找👉`\r\n`&#13;
替换👉`\r\n填写的内容\r\n`&#13;
&#13;
# 匹配以 ?file 开头, 并且之间有任意字符, 最后以 jpg 或 png 结尾&#13;
&#13;
&gt; ipfs 超链接重命名&#13;
&#13;
`\?file.*\.{jpg|png}$`&#13;
&#13;
# 匹配 /* */ 中间包含任意字符串&#13;
&#13;
&gt; css 注释块&#13;
&#13;
`\/\*.*?\*\/`。</description><guid isPermaLink="true">https://gjken.github.io/post/7.html</guid><pubDate>Mon, 30 Dec 2024 03:37:24 +0000</pubDate></item><item><title>Serv00 - 使用记录</title><link>https://gjken.github.io/post/5.html</link><description># 注册 Serv00&#13;
&#13;
注册没什么好说的, gmail+干净一点的ip基本上都可以成功, 这里不多做展开.&#13;
收不到邮件信息的估计是邮箱问题. 比如:https://mail.proton.me&#13;
&#13;
# 准备工作&#13;
&#13;
进入 Additional services 选项卡中找到 Run your own applications 项目,&#13;
如下图所示, 必须要设置成如图所示的 Enabled.&#13;
&#13;
![](https://github.com/user-attachments/assets/f1035178-d821-4704-85ce-0728cb44869a)&#13;
&#13;
如果不开启这一项, 自己的用户目录下的所有文件都无法添加可执行权限.&#13;
&#13;
# 部署记录&#13;
&#13;
## Alist&#13;
&#13;
### 创建端口&#13;
&#13;
每个账户只能创建3个端口.&#13;
其中一个用来反代本地搭建 Alist 的端口, 这里我用 26666 端口.&#13;
&#13;
![](https://github.com/user-attachments/assets/0d7b8337-b3b6-4d36-a257-6fb414bc06c6)&#13;
&#13;
### 创建网站&#13;
&#13;
&gt; Serv00 账号创建好之后默认就有一个网站, 一般是`USERNAME.serv00.net`, 可以随意删除.&#13;
&#13;
下图我写的是自己的域名.&#13;
&#13;
![](https://github.com/user-attachments/assets/6cd71d0d-a0b9-4870-94dc-c43614d621a7)&#13;
&#13;
其中 26666 这个端口是 Alist 服务的端口.&#13;
&#13;
### 网站添加 SSL 证书&#13;
&#13;
站点创建完成后, 点击右边的 SSL 👉 WWW websites 👉 Manage.&#13;
&#13;
![](https://github.com/user-attachments/assets/deb88a16-4e70-4a7d-aa8b-8cf6f37c6294)&#13;
&#13;
点击 Add certificate, 确认好要创建证书的域名, 最后点击 Add 完成创建证书.&#13;
&#13;
![](https://github.com/user-attachments/assets/81770332-00e0-4a12-9abe-b0a38978bbd3)&#13;
&#13;
### 安装 Alist&#13;
&#13;
&gt; [!TIP]&#13;
&gt; Alist 官方在 24年8月17日, 增加了 [beta](https://github.com/AlistGo/alist/releases/tag/beta) 版本, 支持 FreeBSD 系统下能够运行的 Alist 可执行文件🎉&#13;
&#13;
Serv00 本身提供的网站托管在`~/domains`路径下, 所以我建议把 Alist 也部署到这个路径下的子目录.&#13;
&#13;
一键创建目录并下载 Alist, 增加执行权限, 复制到终端粘贴使用.&#13;
&#13;
```bash&#13;
mkdir -p ~/domains/alist &amp;&amp; cd ~/domains/alist &amp;&amp; curl -L -o alist.tar.gz https://github.com/AlistGo/alist/releases/download/beta/alist-freebsd-amd64.tar.gz &amp;&amp; tar -xzf alist.tar.gz &amp;&amp; chomd +x alist&#13;
```&#13;
&#13;
### 第一次启动 Alist 生成配置文件&#13;
&#13;
文件下载好后需要先启动一次 Alist, 让它生成配置文件, 此次一定会报错, 请不用在意~&#13;
&#13;
```bash&#13;
./alist server&#13;
```&#13;
&#13;
### 创建 Alist 所需数据库&#13;
&#13;
回到 Panel 面板, 找到 MySQL 选项卡, 使用 Add database 功能新建一个数据库:&#13;
&#13;
![](https://github.com/user-attachments/assets/1bb33d42-3023-4eaf-9110-9357ffd1adfe)&#13;
&#13;
Database name 和 Username 字段为了方便好记就写 Alist 就行了.&#13;
&#13;
&gt; 密码要求含有大写字母, 小写字母和数字三种字符, 且长度必须超过6个字符.&#13;
&#13;
### 修改配置文件&#13;
&#13;
进入 Panel 面板, 找到 File manager 选项卡, 会如下图的进入文件管理器.&#13;
&#13;
定位这个`config.json`文件, 双击编辑它:&#13;
&#13;
![](https://github.com/user-attachments/assets/217ac434-f85c-4ca7-b649-a746e3d516a2)&#13;
&#13;
我主要修改了`CDN` `database` `scheme`三个部分,&#13;
&#13;
![](https://github.com/user-attachments/assets/ad8bafbc-f342-45b8-8e0f-944f06713078)&#13;
&#13;
&lt;table&gt;&#13;
  &lt;tr&gt;&#13;
    &lt;td&gt;&lt;p&gt;CDN&lt;/p&gt;&lt;/td&gt;&#13;
    &lt;td colspan='2'&gt;&#13;
      &lt;p&gt;&lt;span&gt;可以在 &lt;a href='https://alist.nn.ci/zh/config/configuration.html#cdn'&gt;Alist&lt;/a&gt; 的官方文档找到, 请选择你本地网络连接速度最快的一个.&lt;/span&gt;&lt;/p&gt;&#13;
    &lt;/td&gt;&#13;
  &lt;/tr&gt;&#13;
  &lt;tr&gt;&#13;
    &lt;td rowspan='6'&gt;database&lt;/td&gt;&#13;
    &lt;td&gt;type&lt;/td&gt;&#13;
    &lt;td&gt;因为我们创建的数据库类型是 mysql, 就写&lt;code class='notranslate'&gt;mysql&lt;/code&gt;.&lt;/td&gt;&#13;
  &lt;/tr&gt;&#13;
  &lt;tr&gt;&#13;
    &lt;td&gt;host&lt;/td&gt;&#13;
    &lt;td&gt;例如我的 serv00 是12, 就写&lt;code class='notranslate'&gt;mysql12.serv00.com&lt;/code&gt;, 自己看着写.&lt;/td&gt;&#13;
  &lt;/tr&gt;&#13;
  &lt;tr&gt;&#13;
    &lt;td&gt;port&lt;/td&gt;&#13;
    &lt;td&gt;mysql 端口, 默认&lt;code class='notranslate'&gt;3306&lt;/code&gt;.&lt;/td&gt;&#13;
  &lt;/tr&gt;&#13;
  &lt;tr&gt;&#13;
    &lt;td&gt;user&lt;/td&gt;&#13;
    &lt;td&gt;填写创建的数据库用户名&lt;/td&gt;&#13;
  &lt;/tr&gt;&#13;
  &lt;tr&gt;&#13;
    &lt;td&gt;passdowd&lt;/td&gt;&#13;
    &lt;td&gt;填写创建的数据密码&lt;/td&gt;&#13;
  &lt;/tr&gt;&#13;
  &lt;tr&gt;&#13;
    &lt;td&gt;name&lt;/td&gt;&#13;
    &lt;td&gt;填写创建的数据表名称&lt;/td&gt;&#13;
  &lt;/tr&gt;&#13;
  &lt;tr&gt;&#13;
    &lt;td rowspan='2'&gt;scheme&lt;/td&gt;&#13;
    &lt;td&gt;address&lt;/td&gt;&#13;
    &lt;td&gt;0.0.0.0&lt;/td&gt;&#13;
  &lt;/tr&gt;&#13;
  &lt;tr&gt;&#13;
    &lt;td&gt;http_port&lt;/td&gt;&#13;
    &lt;td&gt;填写创建的端口&lt;/td&gt;&#13;
  &lt;/tr&gt;&#13;
&lt;/table&gt;&#13;
&#13;
改完之后, 点击 save 保存.&#13;
&#13;
### 再次启动 Alist&#13;
&#13;
回到 SSH 窗口中进行操作.&#13;
&#13;
```bash&#13;
./alist server&#13;
```&#13;
&#13;
![](https://github.com/user-attachments/assets/fffb55cc-ce5b-4943-8e2c-30580d85edce)&#13;
&#13;
运行正常, 显示的管理员账号的密码一定要记住. 接着使用 Ctrl+c 停止运行.&#13;
&#13;
### 自定义域名绑定&#13;
&#13;
我这边使用 [us.kg](https://nic.us.kg) 的免费域名进行访问 Alist.&#13;
&#13;
因为 serv00 的域名基本上都会被墙, 没办法只能用~~Cloudflare减速器~~跨墙了, ~~CDN 回源加速不会弄.~~&#13;
&#13;
我们进入 https://dash.cloudflare.com&#13;
&#13;
点击添加域, 再输入自己的域名, 选择最底下的 free 计划一路创建.&#13;
&#13;
然后复制 Cloudflare 给的 dns 名称服务器.&#13;
&#13;
![](https://github.com/user-attachments/assets/18a37ecb-fcb1-4ac6-b326-357c9c464070)&#13;
&#13;
然后转到你的域名提供服务商, 添加 dns 记录.&#13;
&#13;
![](https://github.com/user-attachments/assets/73aad798-1830-4bbf-b281-cda074f40485)&#13;
&#13;
如果没问题就可以通过自定义域名访问了.&#13;
&#13;
### Alist 保活&#13;
&#13;
&gt; 因为 Serv00 会不定时杀进程😅, 所以诞生此方案.&#13;
&#13;
我在 Alist 目录下创建了`runAlist.sh`脚本, 内容如下:&#13;
&#13;
```bash&#13;
screen -ls | awk 'NR&gt;=2&amp;&amp;NR&lt;=20{print $1}' | awk '{print 'screen -S '$1' -X quit'}' | sh&#13;
echo 'Attempting to start screen session 'alist''&#13;
screen -dmS alist bash -c 'cd ~/domains/alist &amp;&amp; ./alist server'&#13;
#screen -ls&#13;
echo '$(date '+%Y-%m-%d %H:%M:%S')' &gt; ~/domains/alist/logfile.txt&#13;
```&#13;
&#13;
转到 panel 面板, 创建 Cron Jobs 定时任务.&#13;
&#13;
我们需要创建一个每小时执行的任务进行保活, 如下图:&#13;
&#13;
![](https://github.com/user-attachments/assets/d15aef00-9874-48ac-b5f4-0c4850b21bcb)&#13;
&#13;
计划任务执行的是我的`runAlist.sh`脚本.&#13;
&#13;
不出意外的话, 隔一段时间进入 Alist 网页需要重新登陆账号, 因为定时脚本会先杀原来的 Alist 进程再重启.&#13;
&#13;
# Serv00+CT8 保活(可TG通知)&#13;
&#13;
&gt; 引用自 [Linux.do](https://linux.do/t/topic/180293)&#13;
&#13;
## 先决条件&#13;
&#13;
- [x] 假设你已经拥有了一个 telegram bot.&#13;
&#13;
## 首先上代码&#13;
&#13;
Worker 代码:&#13;
&#13;
&lt;details&gt;&lt;summary&gt;JavaScript Code&lt;/summary&gt;&#13;
&#13;
```JavaScript&#13;
addEventListener('fetch', event =&gt; {&#13;
  event.respondWith(handleRequest(event.request))&#13;
})&#13;
&#13;
addEventListener('scheduled', event =&gt; {&#13;
  event.waitUntil(handleScheduled(event.scheduledTime))&#13;
})&#13;
&#13;
async function handleRequest(request) {&#13;
  return new Response('Worker is running')&#13;
}&#13;
&#13;
async function handleScheduled(scheduledTime) {&#13;
  const accounts = JSON.parse(ACCOUNTS_JSON)&#13;
  const results = await loginAccounts(accounts)&#13;
  await sendSummary(results)&#13;
}&#13;
&#13;
async function loginAccounts(accounts) {&#13;
  const results = []&#13;
  for (const account of accounts) {&#13;
    const result = await loginAccount(account)&#13;
    results.push({ ...account, ...result })&#13;
    await delay(Math.floor(Math.random() * 8000) + 1000)&#13;
  }&#13;
  return results&#13;
}&#13;
&#13;
function generateRandomUserAgent() {&#13;
  const browsers = ['Chrome', 'Firefox', 'Safari', 'Edge', 'Opera'];&#13;
  const browser = browsers[Math.floor(Math.random() * browsers.length)];&#13;
  const version = Math.floor(Math.random() * 100) + 1;&#13;
  const os = ['Windows NT 10.0', 'Macintosh', 'X11'];&#13;
  const selectedOS = os[Math.floor(Math.random() * os.length)];&#13;
  const osVersion = selectedOS === 'X11' ? 'Linux x86_64' : selectedOS === 'Macintosh' ? 'Intel Mac OS X 10_15_7' : 'Win64; x64';&#13;
&#13;
  return `Mozilla/5.0 (${selectedOS}; ${osVersion}) AppleWebKit/537.36 (KHTML, like Gecko) ${browser}/${version}.0.0.0 Safari/537.36`;&#13;
}&#13;
&#13;
async function loginAccount(account) {&#13;
  const { username, password, panelnum, type } = account&#13;
  let url = type === 'ct8' &#13;
    ? 'https://panel.ct8.pl/login/?next=/' &#13;
    : `https://panel${panelnum}.serv00.com/login/?next=/`&#13;
&#13;
  const userAgent = generateRandomUserAgent();&#13;
&#13;
  try {&#13;
    const response = await fetch(url, {&#13;
      method: 'GET',&#13;
      headers: {&#13;
        'User-Agent': userAgent,&#13;
      },&#13;
    })&#13;
&#13;
    const pageContent = await response.text()&#13;
    const csrfMatch = pageContent.match(/name='csrfmiddlewaretoken' value='([^']*)'/)&#13;
    const csrfToken = csrfMatch ? csrfMatch[1] : null&#13;
&#13;
    if (!csrfToken) {&#13;
      throw new Error('CSRF token not found')&#13;
    }&#13;
&#13;
    const initialCookies = response.headers.get('set-cookie') || ''&#13;
&#13;
    const formData = new URLSearchParams({&#13;
      'username': username,&#13;
      'password': password,&#13;
      'csrfmiddlewaretoken': csrfToken,&#13;
      'next': '/'&#13;
    })&#13;
&#13;
    const loginResponse = await fetch(url, {&#13;
      method: 'POST',&#13;
      headers: {&#13;
        'Content-Type': 'application/x-www-form-urlencoded',&#13;
        'Referer': url,&#13;
        'User-Agent': userAgent,&#13;
        'Cookie': initialCookies,&#13;
      },&#13;
      body: formData.toString(),&#13;
      redirect: 'manual'&#13;
    })&#13;
&#13;
    console.log(`Login response status: ${loginResponse.status}`)&#13;
    console.log(`Login response headers: ${JSON.stringify(Object.fromEntries(loginResponse.headers))}`)&#13;
&#13;
    const loginResponseBody = await loginResponse.text()&#13;
    console.log(`Login response body: ${loginResponseBody.substring(0, 200)}...`)&#13;
&#13;
    if (loginResponse.status === 302 &amp;&amp; loginResponse.headers.get('location') === '/') {&#13;
      const loginCookies = loginResponse.headers.get('set-cookie') || ''&#13;
      const allCookies = combineCookies(initialCookies, loginCookies)&#13;
&#13;
      const dashboardResponse = await fetch(url.replace('/login/', '/'), {&#13;
        headers: {&#13;
          'Cookie': allCookies,&#13;
          'User-Agent': userAgent,&#13;
        }&#13;
      })&#13;
      const dashboardContent = await dashboardResponse.text()&#13;
      console.log(`Dashboard content: ${dashboardContent.substring(0, 200)}...`)&#13;
&#13;
      if (dashboardContent.includes('href='/logout/'') || dashboardContent.includes('href='/wyloguj/'')) {&#13;
        const nowUtc = formatToISO(new Date())&#13;
        const nowBeijing = formatToISO(new Date(Date.now() + 8 * 60 * 60 * 1000))&#13;
        const message = `账号 ${username} (${type}) 于北京时间 ${nowBeijing}（UTC时间 ${nowUtc}）登录成功！`&#13;
        console.log(message)&#13;
        await sendTelegramMessage(message)&#13;
        return { success: true, message }&#13;
      } else {&#13;
        const message = `账号 ${username} (${type}) 登录后未找到登出链接，可能登录失败。</description><guid isPermaLink="true">https://gjken.github.io/post/5.html</guid><pubDate>Sun, 17 Nov 2024 06:53:57 +0000</pubDate></item><item><title>Cloudflare 域名 DNS 托管 + GitHub Pages 自定义域名</title><link>https://gjken.github.io/post/4.html</link><description># 先决条件&#13;
&#13;
假设你已经:&#13;
&#13;
- [x] 拥有了一个域名.&#13;
- [x] 域名备案已解决.&#13;
&#13;
# Cloudflare 添加域&#13;
&#13;
我们进入 https://dash.cloudflare.com&#13;
&#13;
![](https://github.com/user-attachments/assets/65746e4c-33ac-42e5-8261-80b231cae4f2)&#13;
&#13;
输入自己的域名点击继续, 然后选择底部的 Free 计划.&#13;
&#13;
![](https://github.com/user-attachments/assets/81adf580-1fc4-4ad9-90b0-30ae4ef43853)&#13;
&#13;
复制 dns 名称服务器.&#13;
&#13;
![](https://github.com/user-attachments/assets/3fa17e93-d8ef-4271-b2f0-e2387a489601)&#13;
&#13;
然后转到你的域名提供服务商, 添加 dns 记录.&#13;
&#13;
![](https://github.com/user-attachments/assets/73aad798-1830-4bbf-b281-cda074f40485)&#13;
&#13;
# 填写 DNS 记录.&#13;
&#13;
回到 Cloudflare 面板, 进入 dns 记录, 按照下图添加 `CNAME` 和 `A` 记录.&#13;
&#13;
![](https://github.com/user-attachments/assets/57ed2272-5e7e-4807-b3de-bde1b95d7040)&#13;
&#13;
```&#13;
185.199.108.153&#13;
&#13;
185.199.109.153&#13;
&#13;
185.199.110.153&#13;
&#13;
185.199.111.153&#13;
```&#13;
&#13;
# Github Page 设置自定义域名&#13;
&#13;
![](https://github.com/user-attachments/assets/7ac12093-dee3-4a9c-bd55-c124d0ac6453)&#13;
&#13;
填写并点击 Save 之后会提示你等待一会.&#13;
&#13;
![](https://github.com/user-attachments/assets/8087186c-2b32-4064-8b03-92308b063b75)&#13;
&#13;
提示`DNS check successful`代表完成, 之后就可以通过www+你的域名进行访问了.&#13;
&#13;
![](https://github.com/user-attachments/assets/d7e62e5d-32b5-4acd-86dc-432a971c2218)。</description><guid isPermaLink="true">https://gjken.github.io/post/4.html</guid><pubDate>Sat, 16 Nov 2024 14:07:31 +0000</pubDate></item><item><title>免费CDN- jsDelivr+Github 使用方法</title><link>https://gjken.github.io/post/3.html</link><description># jsDelivr 官网&#13;
&#13;
&gt; https://www.jsdelivr.com&#13;
&#13;
# 先决条件&#13;
&#13;
必须要创建一个 GitHub 仓库, 并且存放你需要加速的文件.&#13;
&#13;
# 创建版本号(Releases)&#13;
&#13;
进入仓库并创建 Releases:&#13;
&#13;
![1](https://github.com/user-attachments/assets/d035adc5-9486-4288-9f9c-caf9163d90ba)&#13;
&#13;
名称建议规范一点.&#13;
&#13;
![2](https://github.com/user-attachments/assets/6ca6a2e3-edf4-49b9-afe8-6d8b0d54a34b)&#13;
&#13;
# 创建标签(Tags)&#13;
&#13;
创建 Tags 和 Releases 步骤一样.&#13;
&#13;
# 使用方法&#13;
&#13;
例如:&#13;
&#13;
`https://cdn.jsdelivr.net/gh/[GitHub用户名]/[仓库名]@[版本号或者标签]/[文件路径]`&#13;
&#13;
https://cdn.jsdelivr.net/gh/gjken/gjken.github.io/static/primer.min.css&#13;
&#13;
| Key | Value&#13;
| - | -&#13;
| [GitHub 用户名] | 写你的 GitHub 用户名.&#13;
| [仓库名]  | 写你的 GitHub 仓库名称.&#13;
| [标签或分支] | 例如 `https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js`&lt;br&gt;都不写默认访问最新版本.&lt;/br&gt;&#13;
| [文件路径] | 写你的 GitHub 仓库文件路径.&#13;
&#13;
&gt; [!Important]&#13;
&gt; 省略版本号, 直接访问最新的资源, 不推荐在生产环境中使用.&#13;
&gt; 如果源文件更新, cdn 加速后的文件内容不会更新那么快, 一般有12小时的延迟, ~~大概?~~&#13;
&#13;
# 其它替代地址&#13;
&#13;
Jsdelivr 国内的 CDN 服务被 DNS 污染了, 被指向了Google, Twitter 和 Facebook 的 IP 地址, 导致使用 CDN 服务加速的链接访问失败.&#13;
&#13;
```css&#13;
fastly.jsdelivr.net&#13;
gcore.jsdelivr.net&#13;
testingcf.jsdelivr.net&#13;
test1.jsdelivr.net&#13;
```。</description><guid isPermaLink="true">https://gjken.github.io/post/3.html</guid><pubDate>Tue, 12 Nov 2024 18:47:23 +0000</pubDate></item><item><title>纪念下SAO通关-2024-11-07</title><link>https://gjken.github.io/post/2.html</link><description>Twitter[@sao_anime](https://x.com/sao_anime/status/1854402349412106416)&#13;
&#13;
2024 年 11 月 7 日 14:55&#13;
游戏已通关——&#13;
&#13;
![](https://pbs.twimg.com/media/GbwoZNVbcAAHunh?format=jpg&amp;name=orig)&#13;
&#13;
其它推文:&#13;
&#13;
https://x.com/sao_anime/status/1852274390312141212&#13;
&#13;
![](https://pbs.twimg.com/media/Gbtc4f-aMAAIYZv?format=jpg&amp;name=orig)。</description><guid isPermaLink="true">https://gjken.github.io/post/2.html</guid><pubDate>Tue, 12 Nov 2024 18:41:53 +0000</pubDate></item><item><title>Gmeek - 记录使用过程</title><link>https://gjken.github.io/post/1.html</link><description>[Gmeek](https://github.com/Meekdai/Gmeek) 博客完全依托 Github, 提供域名, 无需服务器, 比起传统的服务器建站更方便快捷.&#13;
&#13;
# 搭建博客&#13;
&#13;
**如何搭建博客我就不写了, 强烈建议看完[官方文档](https://blog.meekdai.com/tag.html#gmeek).**&#13;
&#13;
**这里主要记录一些 js 和 CSS 的修改.记录的修改不一定准确, `Gmeek-spoilertxt='因为改动的地方太多了🥴'`.**&#13;
&#13;
&gt; [!WARNING]&#13;
&gt; 利用 Github Page 搭建的网站内容是完全公开的, 请注意不要上传自己的隐私!!!&#13;
&#13;
## 博客调试&#13;
&#13;
**为了方便调试代码, 创建了一个名为 demo 的仓库, 调试过程只会用 demo 演示, 确定后再同步代码到线上模式.&#13;
&#13;
**demo模式:** https://gjken.github.io/demo&#13;
&#13;
**线上模式:** https://gjken.github.io&#13;
&#13;
**线上模式的仓库用 tag 区分代码版本, release 可有可无, 主要是用来说明版本改动(`Gmeek-spoilertxt='懒得写'`)**&#13;
&#13;
&gt; [!NOTE]&#13;
&gt; static 这个目录里的文件发生了改动, 一定要手动 Actions 之后, 再等待20多分钟(`Gmeek-spoilertxt='测试的大概结果'`)才会更新外链内容.&#13;
&#13;
# Config.json 小妙用&#13;
&#13;
## 引用顺序&#13;
&#13;
官方虽然没说, 但是经过我后面测试得出:&#13;
&#13;
`script`字段里面引用的 js 代码, **写在尾巴加载顺序越靠前!**&#13;
&#13;
&gt; 其它字段还未测试过, 不知道是不是一样的道理.&#13;
&#13;
## subTitle - js插入&#13;
&#13;
`subTitle`字段可用 js 插入 html 实现修改文字.&#13;
&#13;
代码:&#13;
&#13;
```json&#13;
'subTitle':'&lt;script&gt;document.getElementById('content').innerHTML = `&lt;div style='text-align: center;'&gt;&lt;p&gt;CV工程师,&lt;/p&gt;&lt;p&gt;一个又菜又爱玩, 喜欢瞎折腾的流浪者.&lt;/p&gt;&lt;/div&gt;`;&lt;/script&gt;',&#13;
```&#13;
&#13;
## subTitle - 隐藏&#13;
&#13;
`'subTitle':' ',`&#13;
&#13;
- 效果图:&#13;
&#13;
![](https://github.com/user-attachments/assets/297cd65b-95cb-4931-8846-53f777923e51)&#13;
&#13;
可以用空白字符的方式, 隐藏`subTitle`这个必须字段, 无需使用 js 隐藏.&#13;
&#13;
# 记录功能块代码&#13;
&#13;
代码摘抄自网络, 有删改, 都存放在仓库, 使用 jsdelivr CDN 加速.&#13;
&#13;
## [ArticleJs.js](https://github.com/GJKen/gjken.github.io/blob/main/static/ArticleJs.js) - 文章自定义 js 代码&#13;
&#13;
### 图片图片浏览器+图片懒加载整合&#13;
&#13;
[图片浏览器的代码](#fancybox.js---图片浏览器)&#13;
&#13;
[图片懒加载的代码](#图片懒加载)&#13;
&#13;
👇这里说明一下, 图片浏览器和图片懒加载的整合后的工作流程:&#13;
&#13;
&lt;details&gt;&lt;summary&gt;点击展开&lt;/summary&gt;&#13;
&#13;
`Gmeek-imgbox`首先匹配到关键字后转化标签.&#13;
&#13;
`Gmeek.py`匹配转换的代码如下:&#13;
&#13;
```python&#13;
        # 剧透&#13;
        if '&lt;code class='notranslate'&gt;Gmeek-spoilertxt' in post_body: &#13;
            post_body = re.sub(r'&lt;code class='notranslate'&gt;Gmeek-spoilertxt='([^']+)'&lt;/code&gt;', lambda match: f'&lt;span class='spoilerText'&gt;{match.group(1)}&lt;/span&gt;', post_body, flags=re.DOTALL)&#13;
```&#13;
&#13;
markdown 输入:&#13;
&#13;
```&#13;
`Gmeek-imgbox='https://example.com/image.jpg'`&#13;
```&#13;
&#13;
实际转化后的标签如下:&#13;
&#13;
```html&#13;
&lt;div class='ImgLazyLoad-circle'&gt;&lt;/div&gt;&#13;
&lt;img data-fancybox='gallery' img-src='https://example.com/image.jpg'&gt;&#13;
&#13;
&lt;!--&#13;
一个图片未加载时的占位 CSS 动画 DIV, 类名为 .ImgLazyLoad-circle, 这个类名的 CSS 动画我写在了 primer.css 里面.&#13;
一个 img 标签, 包含 fancybox 所需的 data-fancybox='gallery' 值.&#13;
--&gt;&#13;
```&#13;
&#13;
当页面加载完成后, 使用 IntersectionObserver 监听图片是否进入视口, 图片会提前 500px 接近视口时加载&#13;
&#13;
当图片即将进入视口时, 脚本会检测标签里面的`img-src='https://example.com/image.jpg'`内容,  给 img 标签增加`src`值, 这样图片就能显示了.&#13;
&#13;
在 CSS 中 img 标签默认模糊并且透明图片, 脚本会等待图片加载完成后才会正常显示, 显示图片之前会隐藏掉占位转圈动画, 这样就实现了转圈动画消失并显示正常的图片.&#13;
&#13;
图片加载失败则会创建指定的 SVG 图标以及文字提示, 同时隐藏加载失败的 img 标签和占位动画.&#13;
&#13;
大概就是这样的一个流程.&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
## [ArticleToc.js](https://github.com/GJKen/gjken.github.io/blob/main/static/ArticleToc.js) - 文章增加目录列表+一键返回顶部按钮(v1.0)&#13;
&#13;
&gt; 摘抄来源: [Github](https://github.com/cao-gift/cao-gift.github.io?tab=readme-ov-file)&#13;
&gt; 修改-创建`.toc`的位置为body里面.&#13;
&gt; 修改-批量给 a 标签创建的类名为: `toc-h1` `toc-h2` ... `toc-h6`&#13;
&gt; 修改-适配切换博客主题颜色.&#13;
&gt; 修改-增加滚动页面同时滚动章节.&#13;
&gt; 修改-动画和样式.&#13;
&gt; 修改-滚动页面自动显示&amp;隐藏返回顶部按钮.&#13;
&#13;
可以直接引用.&#13;
&#13;
## 文章增加目录列表(集成到header)&#13;
&#13;
这版把目录按钮集成到了文章的`#header`的按钮里面.&#13;
&#13;
功能和[v.1.0版本](#articletoc.js---文章增加目录列表+一键返回顶部按钮(v1.0))差不多一致(小改动), 同时打算把按钮统统放入`#functionBtn`标签里面, 代码也统一放入 ArticleJs.js 里面.&#13;
&#13;
&gt; 修改-当滚动页面使`#functionBtn`按钮不可见时, 使其悬浮在顶部.&#13;
&gt; 修改-文章目录增加顶部和底部跳转按钮.&#13;
&#13;
- 图示:&#13;
&#13;
![](https://github.com/user-attachments/assets/7b02e4e8-7502-44e8-a48c-2a45bb0d5c2f)&#13;
&#13;
## Fancybox.js - 图片浏览器&#13;
&#13;
&gt; Fancybox [官网](https://www.fancyapps.com)&#13;
&#13;
### config.json 里引用 Fancybox 所需的 CSS 和 JS&#13;
&#13;
&gt; 注意末尾的标点符号.&#13;
&#13;
我这里用的是`5.0`版本, cdn 加速链接.&#13;
&#13;
```json&#13;
'script':'&lt;script src='https://fastly.jsdelivr.net/gh/gjken/gjkdemo.github.io@main/static/ArticleJs.js'&gt;&lt;/script&gt;&lt;script src='https://fastly.jsdelivr.net/npm/@fancyapps/ui@5.0/dist/fancybox/fancybox.umd.js'&gt;&lt;/script&gt;'&#13;
```&#13;
&#13;
CSS写入到了👉[文章自定义 js 代码](#articlejs.js---文章自定义-js-代码)&#13;
&#13;
- 内容如下:&#13;
&#13;
意思是页面加载完成再加载 CSS, 同时增加 fancybox 必要的绑定函数.&#13;
&#13;
```Javascript&#13;
document.addEventListener('DOMContentLoaded', () =&gt; {&#13;
    document.head.appendChild(&#13;
        Object.assign(document.createElement('link'), {&#13;
            rel: 'stylesheet',&#13;
            href: 'https://fastly.jsdelivr.net/npm/@fancyapps/ui@5.0/dist/fancybox/fancybox.css'&#13;
        })&#13;
    );&#13;
    Fancybox.bind('[data-fancybox='gallery']', {});&#13;
});&#13;
```&#13;
&#13;
### 增加自定义匹配 - Gmeek-imgbox&#13;
&#13;
修改 Gmeek 仓库的 Gmeek.py.&#13;
&#13;
&gt; 不知道怎么自定义 Gmeek 仓库的看这👉[通过 Gmeek 仓库美化博客](#通过-gmeek-仓库美化博客)&#13;
&#13;
打开`Gmeek.py`文件, 定位字符串`Gmeek-html`&#13;
&#13;
然后在下面增加代码:&#13;
&#13;
```python&#13;
        # 手动插入外链图片&#13;
        if '&lt;code class='notranslate'&gt;Gmeek-imgbox' in post_body:&#13;
            post_body = re.sub(r'&lt;p&gt;\s*&lt;code class='notranslate'&gt;Gmeek-imgbox='([^']+)'&lt;/code&gt;\s*&lt;/p&gt;', lambda match: f'&lt;div class='ImgLazyLoad-circle'&gt;&lt;/div&gt;\n&lt;img data-fancybox='gallery' img-src='{match.group(1)}'&gt;', post_body, flags=re.DOTALL)&#13;
```&#13;
&#13;
- **使用演示**&#13;
&#13;
在 markdown 插入图片:&#13;
&#13;
```html&#13;
`Gmeek-imgbox='https://i0.img2ipfs.com/ipfs/QmNiH2pdrA9Hb61EXgYbKtEssBAGemEjTQRBZbgutUCNx2'`&#13;
```&#13;
&#13;
通过 Actions 转换后实际效果如下, html 的 img 标签会增加 fancybox 所需的`data-fancybox='gallery'`属性.&#13;
&#13;
![](https://github.com/user-attachments/assets/372c5d55-5aae-4f2e-a900-7f93d94e21bd)&#13;
&#13;
## 图片懒加载&#13;
&#13;
&gt; 来源: [Github](https://github.com/liyifanniubi/liyifanniubi.github.io)&#13;
&#13;
代码内容合并到👉[文章自定义 js 代码](#articlejs.js---文章自定义-js-代码)&#13;
&#13;
关键内容如下:&#13;
&#13;
&lt;details&gt;&lt;summary&gt;Javascript Code&lt;/summary&gt;&#13;
&#13;
```Javascript&#13;
    // 懒加载图片&#13;
	const ob = new IntersectionObserver((entries) =&gt; {&#13;
		entries.forEach(entry =&gt; {&#13;
			if (entry.isIntersecting) {&#13;
				const img = entry.target;&#13;
				const imgContainer = img.previousElementSibling;&#13;
				const handleError = (isError = false) =&gt; {&#13;
					if (imgContainer &amp;&amp; imgContainer.classList.contains('ImgLazyLoad')) {&#13;
						imgContainer.style.display = 'none';&#13;
					}&#13;
					if (isError) {&#13;
						const errorContainer = document.createElement('div');&#13;
						errorContainer.classList.add('Imgerror-container');&#13;
						errorContainer.innerHTML = `&lt;svg xmlns='http://www.w3.org/2000/svg' style='height:60px;' class='Imgerror' viewBox='0 0 1024 1024'&gt;&lt;path fill='#ff5b5b' d='M320 896h-77.833L515.92 622.253a21.333 21.333 0 0 0 3.16-26.133l-89.427-149.053 165.427-330.86A21.333 21.333 0 0 0 576 85.333H96a53.393 53.393 0 0 0-53.333 53.334v746.666A53.393 53.393 0 0 0 96 938.667h224A21.333 21.333 0 0 0 320 896zM96 128h445.48L386.253 438.46a21.333 21.333 0 0 0 .787 20.513L474 603.86l-69.333 69.333-89.62-89.653a53.333 53.333 0 0 0-75.427 0L85.333 737.827v-599.16A10.667 10.667 0 0 1 96 128zM85.333 885.333v-87.166l184.46-184.454a10.667 10.667 0 0 1 15.08 0l89.627 89.62L181.833 896H96a10.667 10.667 0 0 1-10.667-10.667zm192-458.666C336.147 426.667 384 378.813 384 320s-47.853-106.667-106.667-106.667S170.667 261.187 170.667 320s47.853 106.667 106.666 106.667zm0-170.667a64 64 0 1 1-64 64 64.073 64.073 0 0 1 64-64zM928 128H661.333a21.333 21.333 0 0 0-19.08 11.793l-.046.087c-.04.087-.087.173-.127.253L535.587 353.127a21.333 21.333 0 1 0 38.16 19.08l100.773-201.54H928a10.667 10.667 0 0 1 10.667 10.666V652.5L783.713 497.54a53.333 53.333 0 0 0-75.426 0L571.08 634.747a21.333 21.333 0 0 0-3.153 26.153l24.666 41.08-203.646 244.36a21.333 21.333 0 0 0 16.386 34.993H928A53.393 53.393 0 0 0 981.333 928V181.333A53.393 53.393 0 0 0 928 128zm0 810.667H450.88L635.053 717.66a21.333 21.333 0 0 0 1.907-24.667l-23.933-39.886L738.46 527.68a10.667 10.667 0 0 1 15.08 0l185.127 185.153V928A10.667 10.667 0 0 1 928 938.667z'/&gt;&lt;/svg&gt;&lt;p class='Imgerror-message'&gt;图片错误&lt;/p&gt;`;&#13;
						img.parentNode.insertBefore(errorContainer, img.nextSibling);&#13;
						img.style.display = 'none';&#13;
					} else {&#13;
						img.classList.remove('ImgLazyLoad');&#13;
						img.classList.add('ImgLoaded');&#13;
					}&#13;
				};&#13;
&#13;
				img.src = img.getAttribute('img-src');&#13;
				ob.unobserve(img);&#13;
&#13;
				img.onload = () =&gt; handleError(false);&#13;
				img.onerror = () =&gt; handleError(true);&#13;
			}&#13;
		});&#13;
	}, {&#13;
		rootMargin: '0px 0px 500px 0px',&#13;
	});&#13;
&#13;
	document.querySelectorAll('[img-src]').forEach(img =&gt; ob.observe(img));&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
加载动画 CSS, 我把它写到了`primer.css`文件里面.&#13;
&#13;
&lt;details&gt;&lt;summary&gt;CSS Code&lt;/summary&gt;&#13;
&#13;
&gt; 这个主要样式一定要写在`:root`选择器的前面!&#13;
&#13;
```CSS&#13;
[data-color-mode=light][data-light-theme=dark],&#13;
[data-color-mode=light][data-light-theme=dark]::selection,&#13;
[data-color-mode=dark][data-dark-theme=dark],&#13;
[data-color-mode=dark][data-dark-theme=dark]::selection {&#13;
	--ImgLazyLoad-circle-shadowColor:#27272745;&#13;
	--ImgLazyLoad-circle-shadowColor2:#28dddf4a;&#13;
}&#13;
&#13;
/* 图片懒加载占位css动画 */&#13;
.ImgLazyLoad-circle {&#13;
	width: 40px;&#13;
	height: 40px;&#13;
	border-radius: 50%;&#13;
	border: 6px #f3f3f3 solid;&#13;
	border-top: 6px #8aefff solid;&#13;
	transition: filter 0.5s ease, opacity 0.5s ease;&#13;
	animation: ImgLazyLoadAni 1.2s infinite;&#13;
	-webkit-animation: ImgLazyLoadAni 1.2s infinite;&#13;
	box-shadow: 6px 6px 14px 0 var(--ImgLazyLoad-circle-shadowColor), -7px -7px 16px 0 var(--ImgLazyLoad-circle-shadowColor2);&#13;
}&#13;
&#13;
@keyframes ImgLazyLoadAni {&#13;
	0% {&#13;
		transform: rotate(0)&#13;
	}&#13;
&#13;
	100% {&#13;
		transform: rotate(360deg)&#13;
	}&#13;
}&#13;
&#13;
@-webkit-keyframes ImgLazyLoadAni {&#13;
	0% {&#13;
		-webkit-transform: rotate(0)&#13;
	}&#13;
&#13;
	100% {&#13;
		-webkit-transform: rotate(360deg)&#13;
	}&#13;
}&#13;
&#13;
/* 图片懒加载文字提示样式 */&#13;
.Imgerror-message {&#13;
	color: #ff5b5b;&#13;
	font-size: 100%;&#13;
	user-select: none;&#13;
}&#13;
&#13;
/* 图片模糊渐显样式 */&#13;
[data-fancybox='gallery']{&#13;
    opacity: 0;&#13;
    filter: blur(15px);&#13;
    transition: opacity 0.5s ease, filter 0.5s ease;&#13;
}&#13;
.ImgLoaded {&#13;
	opacity: 1;&#13;
    filter: blur(0);&#13;
}&#13;
&#13;
:root {&#13;
	--ImgLazyLoad-circle-shadowColor:#0000;&#13;
	--ImgLazyLoad-circle-shadowColor2:#ebfffe&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
## [GmeekVercount_uv.js](https://github.com/GJKen/gjken.github.io/blob/main/static/GmeekVercount_uv.min.js) - 网站增加访客计数器&#13;
&#13;
&gt; Vercount [Github](https://github.com/EvanNotFound/vercount)&#13;
&gt; pv 修改成 uv 计数.&#13;
&#13;
建议放入`allHead`里全站添加 js.&#13;
&#13;
```json&#13;
'allHead':'&lt;script src='https://cdn.jsdelivr.net/gh/gjken/gjkdemo.github.io@main/static/GmeekVercount_uv.min.js'&gt;&lt;/script&gt;'&#13;
```&#13;
&#13;
## [NumPagination.js](https://github.com/GJKen/gjken.github.io/blob/main/static/NumPagination.js) - 主页添加数字分页条&#13;
&#13;
&gt; 来源 [Github](https://github.com/liyifanniubi/liyifanniubi.github.io)&#13;
&#13;
未实际测试过.&#13;
&#13;
# 通过 primer.css, 修改博客样式&#13;
&#13;
[primer.css](https://github.com/GJKen/gjken.github.io/blob/main/static/primer.css), 这个文件用来控制网站的整体样式, 存放在我的 git 仓库, 使用 jsdelivr CDN 加速.&#13;
&#13;
对应的选择器只张贴出关键 CSS 部分的修改, ~~不然代码太多了.~~&#13;
&#13;
下面是修改笔记, 不一定实际使用.&#13;
&#13;
&gt; 已知bug: 给body增加`backdrop-filter: blur(30px);`样式时, 会出现页面异常, 待后续修复.&#13;
&#13;
## \&lt;html&gt; 标签样式&#13;
&#13;
`[data-color-mode]`&#13;
&#13;
&gt; [!NOTE]&#13;
&gt; 优化 light &amp; dark 主题下的背景色.&#13;
&gt; 增加兼容性动画过渡.&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改前&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
[data-color-mode] {&#13;
    color: var(--fgColor-default, var(--color-fg-default));&#13;
    background-color: var(--bgColor-default, var(--color-canvas-default))&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改后&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
[data-color-mode=light][data-light-theme=dark],&#13;
[data-color-mode=light][data-light-theme=dark]::selection,&#13;
[data-color-mode=dark][data-dark-theme=dark],&#13;
[data-color-mode=dark][data-dark-theme=dark]::selection {&#13;
    --html-bgColor: #151c2f;/* 增加 */&#13;
}&#13;
:root {&#13;
    --html-bgColor: #fff;/* 增加 */&#13;
}&#13;
[data-color-mode] {&#13;
    color: var(--fgColor-default, var(--color-fg-default));&#13;
    background-color: var(--html-bgColor);&#13;
    -webkit-transition: background-color 0.5s ease;/* 增加 */&#13;
    -moz-transition: background-color 0.5s ease;/* 增加 */&#13;
    -o-transition: background-color 0.5s ease;/* 增加 */&#13;
    transition: background-color 0.5s ease;/* 增加 */&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
## \&lt;body&gt; 标签样式&#13;
&#13;
`body`&#13;
&#13;
&gt; [!NOTE]&#13;
&gt; 优化 light &amp; dark 主题下的背景色.&#13;
&gt; 增加宽高过渡动画.&#13;
&gt; 增加 1080px 屏幕宽度响应&#13;
&gt; 增加高度 auto 过渡动画, 这是一个较新的属性, Chrome 129+ 才支持.&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改前&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
body {&#13;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Noto Sans', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';&#13;
    font-size: var(--body-font-size, 14px);&#13;
    line-height: 1.5;&#13;
    color: var(--fgColor-default, var(--color-fg-default));&#13;
    background-color: var(--bgColor-default, var(--color-canvas-default))&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改后&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
[data-color-mode=light][data-light-theme=dark],&#13;
[data-color-mode=light][data-light-theme=dark]::selection,&#13;
[data-color-mode=dark][data-dark-theme=dark],&#13;
[data-color-mode=dark][data-dark-theme=dark]::selection {&#13;
    --body-bgColor: #3b3b3bd9;/* 增加 */&#13;
    --body-shadow-color: #52afff3d;/* 增加 */&#13;
}&#13;
:root {&#13;
    --body-bgColor: #ffffffde;/* 增加 */&#13;
    --body-shadow-color: #50a8e726;/* 增加 */&#13;
	interpolate-size: allow-keywords;/* 增加 */&#13;
}&#13;
body {&#13;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Noto Sans', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';&#13;
    font-size: var(--body-font-size, 14px);&#13;
    line-height: 1.5;&#13;
    color: var(--fgColor-default, var(--color-fg-default));&#13;
    background: var(--body-bgColor);&#13;
    box-shadow: 0 0 100px var(--body-shadow-color);/* 增加 */&#13;
    border-radius: 10px;/* 增加 */&#13;
	height: auto;&#13;
}&#13;
/* 增加 */&#13;
@media (min-width: 1080px) {&#13;
    body {&#13;
        max-width: 1000px !important;&#13;
    }&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
## 博客滚动条样式&#13;
&#13;
`::-webkit-scrollbar`&#13;
&#13;
&gt; [!NOTE]&#13;
&gt; 直接增加下面代码.&#13;
&#13;
&lt;details&gt;&lt;summary&gt;CSS Code&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
::-webkit-scrollbar {&#13;
    width: 8px;&#13;
    height: 8px;&#13;
}&#13;
&#13;
::-webkit-scrollbar-thumb {&#13;
    border-radius: 10px;&#13;
    background: #97d3ffa1;&#13;
}&#13;
::-webkit-scrollbar-thumb:hover {&#13;
    background: #81b5daa1;&#13;
}&#13;
&#13;
/* Firefox */&#13;
html {&#13;
    scrollbar-color: #97d3ffa1 transparent;&#13;
    scrollbar-width: thin;&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
## \#header 样式&#13;
&#13;
`#header`&#13;
&#13;
&gt; [!NOTE]&#13;
&gt; 修改顶部为 flex 居中布局, 更加美观.&#13;
&gt; 修改头像 hover 样式.&#13;
&#13;
&lt;details&gt;&lt;summary&gt;CSS Code&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
/* 优化header样式 */&#13;
#header {&#13;
    flex-direction: column !important;&#13;
    align-items: center !important;&#13;
    gap: 10px;&#13;
    padding-bottom: 0 !important;&#13;
    margin-bottom: 24px !important&#13;
}&#13;
&#13;
/* 优化头像样式 */&#13;
#header h1 {&#13;
    display: flex;&#13;
    flex-direction: column !important;&#13;
    align-items: center !important;&#13;
    gap: 15px&#13;
}&#13;
&#13;
#header h1 a {&#13;
    margin: unset !important;&#13;
}&#13;
&#13;
.avatar:hover {&#13;
    transform: scale(1.5) rotate(720deg) !important;&#13;
    box-shadow: 0 0 10px rgb(45 250 255 / 74%);&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
## \#header 图标样式&#13;
&#13;
`.btn-invisible:hover, .btn-invisible.zeroclipboard-is-hover`&#13;
&#13;
&gt; [!NOTE]&#13;
&gt; 图标增加阴影.&#13;
&gt; svg 暗黑模式下颜色.&#13;
&gt; 修改图标 hover 样式.&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改前&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
.btn-invisible {&#13;
	color: var(--fgColor-accent, var(--color-accent-fg));&#13;
	background-color: rgba(0, 0, 0, 0);&#13;
	border: 0;&#13;
	border-radius: 6px;&#13;
	box-shadow: none&#13;
}&#13;
&#13;
.btn-invisible:active,&#13;
.btn-invisible.selected,&#13;
.btn-invisible[aria-selected=true],&#13;
.btn-invisible.zeroclipboard-is-active {&#13;
	color: var(--fgColor-accent, var(--color-accent-fg));&#13;
	background: none;&#13;
	border-color: var(--button-default-borderColor-active, var(--color-btn-active-border));&#13;
	outline: 2px solid var(--focus-outlineColor, var(--color-accent-fg));&#13;
	outline-offset: -2px;&#13;
	box-shadow: none&#13;
}&#13;
&#13;
.btn-invisible:active .btn-invisible.zeroclipboard-is-active {&#13;
	background-color: var(--button-default-bgColor-selected, var(--color-btn-selected-bg))&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&lt;details&gt;&lt;summary&gt;修改后&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
[data-color-mode=light][data-light-theme=dark],&#13;
[data-color-mode=light][data-light-theme=dark]::selection,&#13;
[data-color-mode=dark][data-dark-theme=dark],&#13;
[data-color-mode=dark][data-dark-theme=dark]::selection {&#13;
    /* 增加 */&#13;
	--SideNav-bgColor: #00f0ff;&#13;
	--title-right-svgHovercolor:#ff7150;&#13;
	--header-btn-shadowColor:#00000045;&#13;
	--header-btn-shadowColor2:#9bdfff14;&#13;
}&#13;
:root {&#13;
    /* 增加 */&#13;
	--title-right-svgColor:#000;&#13;
	--title-right-svgHovercolor: #ff7804;&#13;
	--header-btn-shadowColor:#fbfbfb26;&#13;
	--header-btn-shadowColor2:#5f5f5f26;&#13;
}&#13;
.btn-invisible {&#13;
	color: var(--fgColor-accent, var(--color-accent-fg));&#13;
	background-color: rgba(0, 0, 0, 0);&#13;
	border: 0;&#13;
	border-radius: 6px;&#13;
	box-shadow: 6px 6px 14px 0 var(--header-btn-shadowColor), -7px -7px 16px 0 var(--header-btn-shadowColor2);&#13;
	transition: box-shadow .4s ease-in-out,filter .4s ease-in-out;&#13;
}&#13;
/* 图标颜色 */&#13;
.btn-invisible svg path{&#13;
	fill: var(--title-right-svgColor);&#13;
}&#13;
/* 图标hover颜色 */&#13;
.btn-invisible:hover svg path,&#13;
.btn-invisible.zeroclipboard-is-hover svg path{&#13;
	fill: var(--title-right-svgHovercolor);&#13;
}&#13;
&#13;
.btn-invisible:active,&#13;
.btn-invisible.selected,&#13;
.btn-invisible[aria-selected=true],&#13;
.btn-invisible.zeroclipboard-is-active {&#13;
	box-shadow: 6px 6px 14px 0 var(--header-btn-shadowColor) inset, -7px -7px 12px 0 var(--header-btn-shadowColor2) inset;&#13;
}&#13;
&#13;
.btn-invisible:active .btn-invisible.zeroclipboard-is-active {&#13;
	box-shadow: 6px 6px 14px 0 var(--header-btn-shadowColor) inset, -7px -7px 12px 0 var(--header-btn-shadowColor2) inset;&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
## 修改文章主页, 文章的列表样式&#13;
&#13;
&gt; [!NOTE]&#13;
&gt; 还未想好要怎么改, 先占位.&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改前&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
.border {&#13;
	border: var(--borderWidth-thin, 1px) solid var(--borderColor-default, var(--color-border-default)) !important&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改后&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
.border {&#13;
	border: var(--borderWidth-thin, 1px) solid var(--borderColor-default, var(--color-border-default)) !important&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
## 文章 \&lt;blockquote&gt; 标签样式&#13;
&#13;
`.markdown-body blockquote`&#13;
&#13;
&gt; [!NOTE]&#13;
&gt; 修改文字颜色, 适配 light &amp; dark 主题.&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改前&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
.markdown-body blockquote {&#13;
    padding: 0 1em;&#13;
    color: var(--fgColor-muted, var(--color-fg-muted));&#13;
    border-left: .25em solid var(--borderColor-default, var(--color-border-default))&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改后&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
[data-color-mode=light][data-light-theme=dark],&#13;
[data-color-mode=light][data-light-theme=dark]::selection,&#13;
[data-color-mode=dark][data-dark-theme=dark],&#13;
[data-color-mode=dark][data-dark-theme=dark]::selection {&#13;
    /* 增加 */&#13;
    --markdown-blockquote-color: #ffffff8c;&#13;
    --markdown-blockquote-borderLeft-color: #bbbbbb8c;&#13;
}&#13;
:root {&#13;
    /* 增加 */&#13;
    --markdown-blockquote-color: #656d76;&#13;
    --markdown-blockquote-borderLeft-color: #d0d7de;&#13;
}&#13;
.markdown-body blockquote {&#13;
    padding: 0 1em;&#13;
    color: var(--markdown-blockquote-color);&#13;
    border-left: .25em solid var(--markdown-blockquote-borderLeft-color)&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
## 文章文字通用样式&#13;
&#13;
`.markdown-body p, .markdown-body blockquote, .markdown-body ul, .markdown-body ol, .markdown-body dl, .markdown-body table, .markdown-body pre, .markdown-body details`&#13;
&#13;
&gt; [!NOTE]&#13;
&gt; 修改行高为 1.75&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改前&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
.markdown-body p,&#13;
.markdown-body blockquote,&#13;
.markdown-body ul,&#13;
.markdown-body ol,&#13;
.markdown-body dl,&#13;
.markdown-body table,&#13;
.markdown-body pre,&#13;
.markdown-body details {&#13;
	margin-top: 0;&#13;
	margin-bottom: 16px;&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改后&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
.markdown-body p,&#13;
.markdown-body blockquote,&#13;
.markdown-body ul,&#13;
.markdown-body ol,&#13;
.markdown-body dl,&#13;
.markdown-body table,&#13;
.markdown-body pre,&#13;
.markdown-body details {&#13;
	margin-top: 0;&#13;
	margin-bottom: 16px;&#13;
	line-height: 1.75;/* 增加 */&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
## 文章标题通用样式&#13;
&#13;
`.markdown-body h1, .markdown-body h2, .markdown-body h3, .markdown-body h4, .markdown-body h5, .markdown-body h6`&#13;
&#13;
&gt; [!NOTE]&#13;
&gt; 删除左右 padding.&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改前&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
.markdown-body h1,&#13;
.markdown-body h2,&#13;
.markdown-body h3,&#13;
.markdown-body h4,&#13;
.markdown-body h5,&#13;
.markdown-body h6 {&#13;
    padding: .22em;&#13;
    margin-top: 24px;&#13;
    margin-bottom: 16px;&#13;
    font-weight: var(--base-text-weight-semibold, 600);&#13;
    line-height: 1.25&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改后&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
.markdown-body h1,&#13;
.markdown-body h2,&#13;
.markdown-body h3,&#13;
.markdown-body h4,&#13;
.markdown-body h5,&#13;
.markdown-body h6 {&#13;
    padding: .22em 0;&#13;
    margin-bottom: 16px;&#13;
    font-weight: var(--base-text-weight-semibold, 600);&#13;
    line-height: 1.25&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
## 文章 \&lt;h1&gt; 标签样式&#13;
&#13;
`.markdown-body h1`&#13;
&#13;
&gt; [!NOTE]&#13;
&gt; 修改字体大小1.65em.&#13;
&gt; 删除下 padding, 增加左 padding .22em.&#13;
&gt; 增加 margin-top.&#13;
&gt; 优化 light &amp; dark 主题下的背景色.&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改前&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
.markdown-body h1 {&#13;
    padding-bottom: .3em;&#13;
    font-size: 2em;&#13;
    border-bottom: 1px solid var(--borderColor-muted, var(--color-border-muted))&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&lt;details&gt;&lt;summary&gt;修改后&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
[data-color-mode=light][data-light-theme=dark],&#13;
[data-color-mode=light][data-light-theme=dark]::selection,&#13;
[data-color-mode=dark][data-dark-theme=dark],&#13;
[data-color-mode=dark][data-dark-theme=dark]::selection {&#13;
    --markdown-h1-bgColor: #7dc2ff7a;/* 增加 */&#13;
}&#13;
:root {&#13;
    --markdown-h1-bgColor: #c8e5ff7a;/* 增加 */&#13;
}&#13;
.markdown-body h1 {&#13;
    padding-left: .22em;&#13;
    background: var(--markdown-h1-bgColor);/* 增加 */&#13;
    border-radius: 6px;/* 增加 */&#13;
    font-size: 1.65em;&#13;
    border-left: .25em solid #71c4ef63;/* 增加 */&#13;
    padding-left: .25em;/* 增加 */&#13;
    margin-top: 42px;/* 增加 */&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
## 文章 \&lt;h2&gt; 标签样式&#13;
&#13;
`.markdown-body h2`&#13;
&#13;
&gt; [!NOTE]&#13;
&gt; 删除 padding-bottom.&#13;
&gt; 增加下划线动画.&#13;
&gt; 增加阴影样式.&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改前&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
.markdown-body h2 {&#13;
    padding-bottom: .3em;&#13;
    font-size: 1.5em;&#13;
    border-bottom: 1px solid var(--borderColor-muted, var(--color-border-muted))&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改后&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
.markdown-body h2 {&#13;
    padding-bottom: .3em;&#13;
    font-size: 1.5em;&#13;
	box-shadow: rgb(41, 150, 186) 0px 9px 18px -15px;/* 增加 */&#13;
	display: inline-block;/* 增加 */&#13;
	border-radius: 6px;/* 增加 */&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
## 文章 \&lt;img&gt; 标签样式&#13;
&#13;
`.markdown-body img`&#13;
&#13;
&gt; [!NOTE]&#13;
&gt; 优化 light &amp; dark 主题下的背景色.&#13;
&gt; 增加 hover 动画.&#13;
&gt; img 标签增加`display: block;`, 防止 Actions 之后显示错误.&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改前&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
.markdown-body img {&#13;
    max-width: 100%;&#13;
    box-sizing: content-box;&#13;
    background-color: var(--bgColor-default, var(--color-canvas-default))&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改后&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
/* 增加 */&#13;
.markdown-body p {&#13;
    position: relative;&#13;
    overflow: visible;&#13;
    clip-path: inset(0);&#13;
    -webkit-clip-path: inset(0);&#13;
}&#13;
.markdown-body img {&#13;
	display: block;&#13;
    max-width: 100%;&#13;
    box-sizing: content-box;&#13;
	/* 增加 */&#13;
    transition: transform 0.3s ease, -webkit-transform 0.3s ease, clip-path 0.3s ease, -webkit-clip-path 0.3s ease;&#13;
}&#13;
/* 增加 */&#13;
.markdown-body img:hover {&#13;
	transform: scale(1.01);&#13;
	-webkit-transform: scale(1.01);&#13;
	clip-path: inset(-4%);&#13;
	-webkit-clip-path: inset(-4%);&#13;
	cursor: zoom-in;&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
## 文章 \&lt;code&gt; 标签样式&#13;
&#13;
`.markdown-body code, .markdown-body tt`&#13;
&#13;
&gt; [!NOTE]&#13;
&gt; 优化 light &amp; dark 主题下的背景色.&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改前&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
.markdown-body code,&#13;
.markdown-body tt {&#13;
    background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改后&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
[data-color-mode=light][data-light-theme=dark],&#13;
[data-color-mode=light][data-light-theme=dark]::selection,&#13;
[data-color-mode=dark][data-dark-theme=dark],&#13;
[data-color-mode=dark][data-dark-theme=dark]::selection {&#13;
    --markdown-code-bgColor: #0198b5a1;/* 增加 */&#13;
}&#13;
:root {&#13;
    --markdown-code-bgColor: #81818138;/* 增加 */&#13;
}&#13;
.markdown-body code,&#13;
.markdown-body tt {&#13;
    background-color: var(--markdown-code-bgColor);&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
## 文章代码块样式&#13;
&#13;
`.markdown-body .highlight pre, .markdown-body pre`&#13;
&#13;
&gt; [!NOTE]&#13;
&gt; 优化 light &amp; dark 主题下的背景色.&#13;
&gt; 增加内阴影.&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改前&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
.markdown-body .highlight pre,.markdown-body pre {&#13;
    padding: 16px;&#13;
    overflow: auto;&#13;
    font-size: 85%;&#13;
    line-height: 1.45;&#13;
    color: var(--fgColor-default, var(--color-fg-default));&#13;
    background-color: var(--bgColor-muted, var(--color-canvas-subtle));&#13;
    border-radius: 6px&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改后&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
[data-color-mode=light][data-light-theme=dark],&#13;
[data-color-mode=light][data-light-theme=dark]::selection,&#13;
[data-color-mode=dark][data-dark-theme=dark],&#13;
[data-color-mode=dark][data-dark-theme=dark]::selection {&#13;
    --markdown-pre-bgColor: #27282d;/* 增加 */&#13;
	--markdown-pre-shadowColor: #00000026;/* 增加 */&#13;
}&#13;
:root {&#13;
    --markdown-pre-bgColor: #f6f8fa;/* 增加 */&#13;
	--markdown-pre-shadowColor: #5f5f5f26;/* 增加 */&#13;
}&#13;
.markdown-body .highlight pre, .markdown-body pre {&#13;
	padding: 16px;&#13;
	overflow: auto;&#13;
	font-size: 85%;&#13;
	line-height: 1.45;&#13;
	color: var(--fgColor-default, var(--color-fg-default));&#13;
	border-radius: 6px;&#13;
	background-color: var(--markdown-pre-bgColor);/* 增加 */&#13;
	box-shadow: 4px 5px 14px 0 var(--markdown-pre-shadowColor) inset;/* 增加 */&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
## 文章 diff 代码块样式&#13;
&#13;
&gt; [!NOTE]&#13;
&gt; 因默认的效果可以双击复制到+和-号, 现通过 CSS 控制使其无法被选中复制.&#13;
&gt; 直接增加下面代码.&#13;
&#13;
&lt;details&gt;&lt;summary&gt;CSS Code&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
.pl-mi1 {&#13;
	user-select: text;&#13;
}&#13;
&#13;
.pl-mi1&gt;span {&#13;
	user-select: none;&#13;
}&#13;
&#13;
.pl-md {&#13;
	user-select: text;&#13;
}&#13;
&#13;
.pl-md&gt;span {&#13;
	user-select: none;&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
- 效果图:&#13;
&#13;
![](https://github.com/user-attachments/assets/7ee3a3f5-0074-4bf0-9e22-4be7fccd69e5)&#13;
&#13;
## 文章一键复制代码按钮样式&#13;
&#13;
&gt; [!NOTE]&#13;
&gt; 给按钮增加 hover 动画, 使其显示&amp;隐藏一键复制按钮.&#13;
&gt; 直接增加下面代码.&#13;
&#13;
&lt;details&gt;&lt;summary&gt;CSS Code&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
/* 一键复制hover出入动画 */&#13;
.clipboard-container {&#13;
    opacity: 0;&#13;
    visibility: hidden;&#13;
    pointer-events: none;&#13;
    transition: opacity 0.3s ease, visibility 0s 0.3s;&#13;
    -webkit-transition: opacity 0.3s ease, visibility 0s 0.3s&#13;
}&#13;
&#13;
.snippet-clipboard-content:hover .clipboard-container {&#13;
    opacity: 1;&#13;
    visibility: visible;&#13;
    pointer-events: auto;&#13;
    transition: opacity 0.3s ease, visibility 0s 0s;&#13;
    -webkit-transition: opacity 0.3s ease, visibility 0s 0s&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
## 文章 \&lt;a&gt; 标签样式&#13;
&#13;
`a`&#13;
&#13;
&gt; [!NOTE]&#13;
&gt; 这个选择器经过查找发现有2行重复了, 总之合并成最靠下的那一行.&#13;
&gt; 如果要改白天模式下超链的颜色, 需要定位36行的选择器然后找到`--color-accent-fg: #0969da`&#13;
&gt; 优化 light &amp; dark 主题下的颜色.&#13;
&gt; 修改下划线动画.&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改前&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
[data-color-mode=light][data-light-theme=dark],&#13;
[data-color-mode=light][data-light-theme=dark]::selection,&#13;
[data-color-mode=dark][data-dark-theme=dark],&#13;
[data-color-mode=dark][data-dark-theme=dark]::selection {&#13;
    --color-accent-fg: #2f81f7;&#13;
}&#13;
/* 这条在12300行左右出现 */&#13;
a {&#13;
    background-color: rgba(0, 0, 0, 0)&#13;
}&#13;
/* 这条在12500行左右出现 */&#13;
a {&#13;
	color: var(--fgColor-accent, var(--color-accent-fg));&#13;
	text-decoration: none&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改后&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
[data-color-mode=light][data-light-theme=dark],&#13;
[data-color-mode=light][data-light-theme=dark]::selection,&#13;
[data-color-mode=dark][data-dark-theme=dark],&#13;
[data-color-mode=dark][data-dark-theme=dark]::selection {&#13;
    --color-accent-fg: #20d4ff;&#13;
}&#13;
/* &#13;
合并靠下的那一行, 修改为下面内容:&#13;
*/&#13;
a {&#13;
	background: linear-gradient(#90d1ff, #90d1ff) no-repeat left bottom;&#13;
	background-size: 0 2px;&#13;
	transition: all 0.25s ease;&#13;
	-webkit-transition: all 0.25s ease;&#13;
	color: var(--fgColor-accent, var(--color-accent-fg));&#13;
	text-decoration: none&#13;
}&#13;
/* 增加 */&#13;
.markdown-body a:hover {&#13;
    background-size: 100% 2px;&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
## 文章 \&lt;td&gt; 最后的子元素样式&#13;
&#13;
`.markdown-body table td&gt;:last-child`&#13;
&#13;
&gt; [!NOTE]&#13;
&gt; 修改下标基线对齐位置.&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改前&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
.markdown-body table td&gt;:last-child {&#13;
	margin-bottom: 0&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改后&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
.markdown-body table td&gt;:last-child {&#13;
	margin-bottom: 0;&#13;
	vertical-align: sub&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
- 效果图:&#13;
&#13;
![](https://github.com/user-attachments/assets/f921eaa2-cfc3-4c3a-bb96-3d58a519a7dc)&#13;
&#13;
# 通过 Gmeek 仓库美化博客&#13;
&#13;
为什么这样做? `Gmeek-spoilertxt='自娱自乐.~~'`&#13;
&#13;
## Fork Gmeek 仓库&#13;
&#13;
仓库地址👉 https://github.com/Meekdai/Gmeek&#13;
&#13;
![](https://github.com/user-attachments/assets/363f7bc7-34e0-4089-ab15-0a05e82a5a1c)&#13;
&#13;
fork 之后, 转到搭建博客的 github 源码,&#13;
&#13;
打开`.github/workflows/Gmeek.yml`文件, 修改构建博客仓库的地址为你自己的仓库地址&#13;
&#13;
![](https://github.com/user-attachments/assets/206e274c-860f-4292-b710-bf904688cc86)&#13;
&#13;
打开`config.json`文件, 把`GMEEK_VERSION`的修改值为👉`main`&#13;
&#13;
&gt; [!NOTE]&#13;
&gt; 如果值是`last`的话, Actions 会失败, 因为默认值`last`是靠模板仓库的 tag 来构建的, 改成 main 就不会构建失败.&#13;
&gt; ~~创建新的 tag 也可以, 但是挺麻烦.~~&#13;
&#13;
## 修改 Actions 定时任务时间&#13;
&#13;
原本为每天 UTC 时间 16 点定时 Actions.&#13;
&#13;
```yaml&#13;
        - cron: '0 16 * * *'&#13;
```&#13;
&#13;
改成每周 UTC 时间 18 点定时 Actions.&#13;
&#13;
```yaml&#13;
        - cron: '0 18 * * 0'&#13;
```&#13;
&#13;
## 修改网站下方的文字&#13;
&#13;
打开`Gmeek.py`&#13;
&#13;
下图文字直接修改即可, 不同语言的按需修改.&#13;
&#13;
![](https://github.com/user-attachments/assets/32be66c5-d8f2-4476-a46c-074f49162868)&#13;
&#13;
## 修改默认 primer.css 链接&#13;
&#13;
打开`Gmeek.py`&#13;
&#13;
![](https://github.com/user-attachments/assets/539ccdbe-68e4-4d14-b293-171a4b524bef)&#13;
&#13;
这里我直接写改成我存放的链接, 并使用 tag 控制版本.&#13;
&#13;
## 修改模板文件记录&#13;
&#13;
### base.html 文件&#13;
&#13;
&gt; [!Important]&#13;
&gt; base 这个模板文件里增加的代码可以应用到所有页面, 优先级很高.&#13;
&#13;
1. **增加所需的样式.**&#13;
&#13;
&gt; 文章头部背景色.&#13;
&gt; 打字效果动画.&#13;
&gt; 动画(已引用的地方:`#header`打字机光标, `body``#content``functionBtn``.tagTitle``.title-left a``.subnav-search`向上渐显动画).&#13;
&gt; 分离图标的`#functionBtn`样式.&#13;
&#13;
&lt;details&gt;&lt;summary&gt;CSS Code&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
:root{--functionBtnFlex-bgColor:#ffffff61;}&#13;
[data-color-mode=light][data-light-theme=dark],[data-color-mode=light][data-light-theme=dark]::selection,[data-color-mode=dark][data-dark-theme=dark],[data-color-mode=dark][data-dark-theme=dark]::selection{--functionBtnFlex-bgColor:#ffffff00;}&#13;
&#13;
@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}&#13;
&#13;
@keyframes blink{50%{opacity:0}100%{opacity:1}}@-webkit-keyframes blink{50%{opacity:0}100%{opacity:1}}&#13;
&#13;
@keyframes grow {&#13;
    0% {opacity: 0.85;transform: scale(0.5);}&#13;
    100% {opacity: 1;transform: translate(1);}&#13;
}&#13;
@-webkit-keyframes grow {&#13;
    0% {opacity: 0.85;-webkit-transform: scale(0.5);}&#13;
    100% {opacity: 1;-webkit-transform: translate(1);}&#13;
}&#13;
&#13;
@keyframes slide-fade-in {&#13;
	0% {opacity: 0;transform: translate3d(0, 20px, 0);}&#13;
	100% {opacity: 1;transform: translate(0, 0, 0);}&#13;
}&#13;
@-webkit-keyframes slide-fade-in {&#13;
	0% {opacity: 0;-webkit-transform: translate3d(0, 20px, 0);}&#13;
	100% {opacity: 1;-webkit-transform: translate(0, 0, 0);}&#13;
}&#13;
&#13;
#functionBtn{display:flex;justify-content:center;margin:20px 0;gap:20px;transition: transform 0.3s ease-in-out;}&#13;
#functionBtn a{padding:14px 16px;}&#13;
#functionBtn.Btn-flex{position:fixed;margin:0;padding:20px 0;top:-100px;left:0;width:100%;min-width:500px;background-color:var(--functionBtnFlex-bgColor);backdrop-filter:blur(30px);box-shadow:#00000078 0 9px 18px -15px;z-index:100;}&#13;
&#13;
body,#content,#functionBtn,.tagTitle,.title-left a,.subnav-search{-webkit-animation:slide-fade-in 0.8s ease;animation:slide-fade-in 0.8s ease}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
2. **定位`#header`, 修改样式.**&#13;
&#13;
&gt; 去除下划线, 优化布局.&#13;
&#13;
```Diff&#13;
+#header .homepage-header{display:flex;flex-direction:column;align-items:center;gap:10px;margin-bottom:24px;}&#13;
👆&#13;
-#header{display:flex;padding-bottom:8px;border-bottom: 1px solid var(--borderColor-muted, var(--color-border-muted));margin-bottom: 16px;}&#13;
```&#13;
&#13;
### post.html 文件&#13;
&#13;
&gt; [!Important]&#13;
&gt; post 这个模板文件里增加的代码可以应用到所有文章页面.&#13;
&#13;
1. **定位`.postTitle`, 修改样式**&#13;
&#13;
&gt; 修改标题文字居中显示.&#13;
&gt; after 是光标, blink 是光标动画.&#13;
&#13;
```Diff&#13;
+.postTitle{margin:0 auto;font-size:40px;font-weight:bold;}&#13;
+.postTitle::after{content:'|';animation:blink 1s infinite;font-family:fantasy;font-weight:normal;vertical-align:text-top;}&#13;
+.no-blink::after{animation:none;}&#13;
👆&#13;
-.postTitle{margin: auto 0;font-size:40px;font-weight:bold;}&#13;
```&#13;
&#13;
3. **定位样式`#functionBtn .circle`, 删除`margin-right:8px;`**&#13;
&#13;
```Diff&#13;
+#functionBtn .circle{padding: 14px 16px;}&#13;
👆&#13;
-#functionBtn .circle{padding: 14px 16px;margin-right:8px;}&#13;
```&#13;
&#13;
4. **body响应**&#13;
&#13;
定位`@media (max-width:600px) {`, 给 body 增加最小宽度500px: `min-width:500px;`&#13;
&#13;
5. **分离 header 文字以及图标**&#13;
&#13;
&gt; 需要把`.title-right`这个类名全部重命名为`#functionBtn`&#13;
&gt; 增加搜索页按钮.&#13;
&gt; 增加文章目录按钮.&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改前&lt;/summary&gt;&#13;
&#13;
```html&#13;
{% block header %}&#13;
&lt;h1 class='postTitle'&gt;{{ blogBase['postTitle'] }}&lt;/h1&gt;&#13;
&lt;div class='title-right'&gt;&#13;
    &lt;a href='{{ blogBase['homeUrl'] }}' id='buttonHome' class='btn btn-invisible circle' title='{{ i18n['home'] }}'&gt;&#13;
        &lt;svg class='octicon' width='16' height='16'&gt;&#13;
            &lt;path id='pathHome' fill-rule='evenodd'&gt;&lt;/path&gt;&#13;
        &lt;/svg&gt;&#13;
    &lt;/a&gt;&#13;
    {% if blogBase['showPostSource']==1 %}&#13;
    &lt;a href='{{ blogBase['postSourceUrl'] }}' target='_blank' class='btn btn-invisible circle' title='Issue'&gt;&#13;
        &lt;svg class='octicon' width='16' height='16'&gt;&#13;
            &lt;path id='pathIssue' fill-rule='evenodd'&gt;&lt;/path&gt;&#13;
        &lt;/svg&gt;&#13;
    &lt;/a&gt;&#13;
    {% endif %}&#13;
&#13;
    &lt;a class='btn btn-invisible circle' onclick='modeSwitch();' title='{{ i18n['switchTheme'] }}' {%- if blogBase['themeMode']=='fix' -%}style='display:none;'{%- endif -%}&gt;&#13;
        &lt;svg class='octicon' width='16' height='16' &gt;&#13;
            &lt;path id='themeSwitch' fill-rule='evenodd'&gt;&lt;/path&gt;&#13;
        &lt;/svg&gt;&#13;
    &lt;/a&gt;&#13;
&#13;
&lt;/div&gt;&#13;
{% endblock %}&#13;
```&#13;
&lt;/details&gt;&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改后&lt;/summary&gt;&#13;
&#13;
```html&#13;
{% block header %}&#13;
&lt;h1 class='postTitle'&gt;{{ blogBase['postTitle'] }}&lt;/h1&gt;&#13;
{% endblock %}&#13;
&#13;
{% block functionBtn %}&#13;
&lt;a href='{{ blogBase['homeUrl'] }}' id='buttonHome' class='btn btn-invisible circle' title='{{ i18n['home'] }}'&gt;&#13;
	&lt;svg class='octicon' width='16' height='16'&gt;&lt;path id='pathHome' fill-rule='evenodd'&gt;&lt;/path&gt;&lt;/svg&gt;&#13;
&lt;/a&gt;&#13;
{% if blogBase['showPostSource']==1 %}&#13;
&lt;a href='{{ blogBase['postSourceUrl'] }}' target='_blank' class='btn btn-invisible circle' title='Issue'&gt;&#13;
	&lt;svg class='octicon' width='16' height='16'&gt;&lt;path id='pathIssue' fill-rule='evenodd'&gt;&lt;/path&gt;&lt;/svg&gt;&#13;
&lt;/a&gt;&#13;
{% endif %}&#13;
&#13;
&lt;a class='btn btn-invisible circle' onclick='modeSwitch();' title='{{ i18n['switchTheme'] }}' {%- if blogBase['themeMode']=='fix' -%}style='display:none;'{%- endif -%}&gt;&#13;
	&lt;svg class='octicon' width='16' height='16' &gt;&lt;path id='themeSwitch' fill-rule='evenodd'&gt;&lt;/path&gt;&lt;/svg&gt;&#13;
&lt;/a&gt;&#13;
&#13;
&lt;a href='{{ blogBase['homeUrl'] }}/tag.html' id='buttonSearch' class='btn btn-invisible circle' title='{{ i18n['Search'] }}'&gt;&#13;
	&lt;svg class='octicon' width='16' height='16' &gt;&#13;
		&lt;path id='pathSearch' fill-rule='evenodd'&gt;&lt;/path&gt;&#13;
	&lt;/svg&gt;&#13;
&lt;/a&gt;&#13;
&#13;
&lt;a class='ArticleTOC btn btn-invisible circle' title='文章目录'&gt;&#13;
	&lt;svg class='octicon' width='16' height='16'&gt;&lt;path&gt;&lt;/path&gt;&lt;/svg&gt;&#13;
&lt;/a&gt;&#13;
{% endblock %}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
定位`document.getElementById('pathHome').setAttribute('d',IconList['home']);`, 在下面一行增加js.&#13;
&#13;
&gt; 暂时还不知道如何通过变量增加 path 的路径信息, 只能直接模仿原先的增加方式上, 直接写路径.&#13;
&#13;
```Javascript&#13;
document.getElementById('ArticleTOC').setAttribute('d','M1 2.75A.75.75 0 0 1 1.75 2h12.5a.75.75 0 0 1 0 1.5H1.75A.75.75 0 0 1 1 2.75Zm0 5A.75.75 0 0 1 1.75 7h12.5a.75.75 0 0 1 0 1.5H1.75A.75.75 0 0 1 1 7.75ZM1.75 12h12.5a.75.75 0 0 1 0 1.5H1.75a.75.75 0 0 1 0-1.5Z');&#13;
&#13;
document.getElementById('pathSearch').setAttribute('d','M15.7 13.3l-3.81-3.83A5.93 5.93 0 0 0 13 6c0-3.31-2.69-6-6-6S1 2.69 1 6s2.69 6 6 6c1.3 0 2.48-.41 3.47-1.11l3.83 3.81c.19.2.45.3.7.3.25 0 .52-.09.7-.3a.996.996 0 0 0 0-1.41v.01zM7 10.7c-2.59 0-4.7-2.11-4.7-4.7 0-2.59 2.11-4.7 4.7-4.7 2.59 0 4.7 2.11 4.7 4.7 0 2.59-2.11 4.7-4.7 4.7z');&#13;
```&#13;
&#13;
6. **添加自定义 JS 代码.**&#13;
&#13;
&gt; 添加打字效果.&#13;
&gt; 添加滚动切换显示顶部按钮导航.&#13;
&#13;
定位`&lt;script&gt;`标签, 在里面增加 JS 代码:&#13;
&#13;
&gt; [!NOTE]&#13;
&gt; `document.addEventListener('DOMContentLoaded', () =&gt; {`这个监听不止可写当前功能, 还可写其它功能的代码进去.&#13;
&gt; 实际应用场景我把这块的代码都压缩合并了.&#13;
&#13;
&lt;details&gt;&lt;summary&gt;JavaScript&lt;/summary&gt;&#13;
&#13;
```Javascript&#13;
// 获取 .postTitle 元素的文本内容存储后清空&#13;
const postTitle = document.querySelector('.postTitle');&#13;
const textContent = postTitle.textContent;&#13;
postTitle.textContent = '';&#13;
&#13;
// 定义逐字显示文本的函数, 末尾的数值代表每次输入字符的速度(毫秒)&#13;
let idx = 0;&#13;
const writeTimer = setInterval(() =&gt; {&#13;
    postTitle.textContent = textContent.slice(0, idx++);&#13;
    if (idx &gt; textContent.length) {&#13;
        clearInterval(writeTimer);&#13;
        postTitle.classList.remove('no-blink');&#13;
    }&#13;
}, 80);&#13;
&#13;
postTitle.classList.add('no-blink');&#13;
&#13;
document.addEventListener('DOMContentLoaded', () =&gt; {&#13;
    // 创建检查按钮, 插入到指定id #functionBtn 的后面&#13;
    const checkBtn = document.createElement('div');&#13;
    checkBtn.id = 'checkBtn';&#13;
    const functionBtn = document.getElementById('functionBtn');&#13;
    functionBtn.insertAdjacentElement('afterend', checkBtn);&#13;
&#13;
    // 用 IntersectionObserver 观察 checkBtn 这个div的可见性&#13;
    const observer = new IntersectionObserver(entries =&gt; {&#13;
        entries.forEach(entry =&gt; {&#13;
            const isIntersecting = entry.isIntersecting;&#13;
            functionBtn.classList.toggle('Btn-flex', !isIntersecting);&#13;
            functionBtn.style.top = isIntersecting ? '0' : '-100px';&#13;
        });&#13;
    }, { rootMargin: '300px 0px 0px 0px', threshold: 0 });&#13;
    observer.observe(checkBtn);&#13;
&#13;
    let startY = 0;&#13;
&#13;
    // 通用滚动处理函数&#13;
    const handleScroll = deltaY =&gt; {&#13;
        functionBtn.style.top = deltaY &gt; 0 ? '-100px' : '0';&#13;
    };&#13;
&#13;
// 监听触摸和滚轮事件&#13;
document.addEventListener('touchstart', e =&gt; startY = e.touches[0].clientY);&#13;
document.addEventListener('touchmove', e =&gt; handleScroll(e.touches[0].clientY - startY));&#13;
document.addEventListener('wheel', e =&gt; handleScroll(e.deltaY));&#13;
});&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
### plist.html 文件&#13;
&#13;
&gt; [!Important]&#13;
&gt; plist 这个模板文件里增加的代码可以应用到博客首页.&#13;
&#13;
1. **增加样式**&#13;
&#13;
```CSS&#13;
.title-left{display:flex;flex-direction:column;align-items:center;gap:20px;}&#13;
```&#13;
&#13;
2. **定位样式`.title-left`, 直接删除相关的所有样式**&#13;
&#13;
3. **定位`.avatar:hover`, 修改样式**&#13;
&#13;
```CSS&#13;
.avatar:hover{transform:scale(1.5) rotate(720deg);box-shadow:0 0 10px #2dfaffbd;}&#13;
```&#13;
&#13;
4. **分离#header的文字以及图标**&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改前&lt;/summary&gt;&#13;
&#13;
```html&#13;
{% block header %}&#13;
&lt;div class='title-left'&gt;&#13;
    &lt;img src='{{ blogBase['avatarUrl'] }}' class='avatar circle' id='avatarImg' alt='avatar'&gt;&#13;
    {%- if blogBase['displayTitle']=='Meekdai' -%}&#13;
    &lt;a class='blogTitle' href='https://meekdai.com'&gt;&lt;span style='font-size:0;'&gt;M&lt;/span&gt;eekdai&lt;/a&gt;&#13;
    {% else -%}&#13;
    &lt;a class='blogTitle'&gt;{{ blogBase['displayTitle'] }}&lt;/a&gt;&#13;
    {%- endif -%}&#13;
&lt;/div&gt;&#13;
&lt;div class='title-right'&gt;&#13;
    &lt;a href='{{ blogBase['homeUrl'] }}/tag.html' id='buttonSearch' class='btn btn-invisible circle' title='{{ i18n['Search'] }}'&gt;&#13;
        &lt;svg class='octicon' width='16' height='16' &gt;&#13;
            &lt;path id='pathSearch' fill-rule='evenodd'&gt;&lt;/path&gt;&#13;
        &lt;/svg&gt;&#13;
    &lt;/a&gt;&#13;
    {% for key, value in blogBase['exlink'].items() -%}&#13;
    &lt;a href='{{ value }}' class='btn btn-invisible circle' title='{{ key }}' target='_blank'&gt;&#13;
        &lt;svg class='octicon' width='16' height='16' &gt;&#13;
            &lt;path id='{{ key }}' fill-rule='evenodd'&gt;&lt;/path&gt;&#13;
        &lt;/svg&gt;&#13;
    &lt;/a&gt;&#13;
    {%- endfor %}&#13;
    {% for num in blogBase['singeListJson'] -%}&#13;
    &lt;a href='{{ blogBase['homeUrl'] }}/{{ blogBase['singeListJson'][num]['labels'][0] }}.html' class='btn btn-invisible circle' title='{{ blogBase['singeListJson'][num]['postTitle'] }}'&gt;&#13;
        &lt;svg class='octicon' width='16' height='16' &gt;&#13;
            &lt;path id='{{ blogBase['singeListJson'][num]['postTitle'] }}' fill-rule='evenodd'&gt;&lt;/path&gt;&#13;
        &lt;/svg&gt;&#13;
    &lt;/a&gt;&#13;
    {%- endfor %}&#13;
    &lt;a href='{{ blogBase['homeUrl'] }}/rss.xml' target='_blank' id='buttonRSS' class='btn btn-invisible circle' title='RSS'&gt;&#13;
        &lt;svg class='octicon' width='16' height='16' &gt;&#13;
            &lt;path id='pathRSS' fill-rule='evenodd'&gt;&lt;/path&gt;&#13;
        &lt;/svg&gt;&#13;
    &lt;/a&gt;&#13;
    &lt;a class='btn btn-invisible circle' onclick='modeSwitch()' title='{{ i18n['switchTheme'] }}' {%- if blogBase['themeMode']=='fix' -%}style='display:none;'{%- endif -%}&gt;&#13;
        &lt;svg class='octicon' width='16' height='16' &gt;&#13;
            &lt;path id='themeSwitch' fill-rule='evenodd'&gt;&lt;/path&gt;&#13;
        &lt;/svg&gt;&#13;
    &lt;/a&gt;&#13;
&lt;/div&gt;&#13;
{% endblock %}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改后&lt;/summary&gt;&#13;
&#13;
```html&#13;
{% block header %}&#13;
&lt;div class='title-left'&gt;&#13;
    &lt;img src='{{ blogBase['avatarUrl'] }}' class='avatar circle' id='avatarImg' alt='avatar'&gt;&#13;
    {%- if blogBase['displayTitle']=='Meekdai' -%}&#13;
    &lt;a class='blogTitle' href='https://meekdai.com'&gt;&lt;span style='font-size:0;'&gt;M&lt;/span&gt;eekdai&lt;/a&gt;&#13;
    {% else -%}&#13;
    &lt;a class='blogTitle'&gt;{{ blogBase['displayTitle'] }}&lt;/a&gt;&#13;
    {%- endif -%}&#13;
&lt;/div&gt;&#13;
{% endblock %}&#13;
&#13;
{% block functionBtn %}&#13;
&lt;a href='{{ blogBase['homeUrl'] }}/tag.html' id='buttonSearch' class='btn btn-invisible circle' title='{{ i18n['Search'] }}'&gt;&#13;
	&lt;svg class='octicon' width='16' height='16' &gt;&#13;
		&lt;path id='pathSearch' fill-rule='evenodd'&gt;&lt;/path&gt;&#13;
	&lt;/svg&gt;&#13;
&lt;/a&gt;&#13;
{% for key, value in blogBase['exlink'].items() -%}&#13;
&lt;a href='{{ value }}' class='btn btn-invisible circle' title='{{ key }}' target='_blank'&gt;&#13;
	&lt;svg class='octicon' width='16' height='16' &gt;&#13;
		&lt;path id='{{ key }}' fill-rule='evenodd'&gt;&lt;/path&gt;&#13;
	&lt;/svg&gt;&#13;
&lt;/a&gt;&#13;
{%- endfor %}&#13;
{% for num in blogBase['singeListJson'] -%}&#13;
&lt;a href='{{ blogBase['homeUrl'] }}/{{ blogBase['singeListJson'][num]['labels'][0] }}.html' class='btn btn-invisible circle' title='{{ blogBase['singeListJson'][num]['postTitle'] }}'&gt;&#13;
	&lt;svg class='octicon' width='16' height='16' &gt;&#13;
		&lt;path id='{{ blogBase['singeListJson'][num]['postTitle'] }}' fill-rule='evenodd'&gt;&lt;/path&gt;&#13;
	&lt;/svg&gt;&#13;
&lt;/a&gt;&#13;
{%- endfor %}&#13;
&lt;a href='{{ blogBase['homeUrl'] }}/rss.xml' target='_blank' id='buttonRSS' class='btn btn-invisible circle' title='RSS'&gt;&#13;
	&lt;svg class='octicon' width='16' height='16' &gt;&#13;
		&lt;path id='pathRSS' fill-rule='evenodd'&gt;&lt;/path&gt;&#13;
	&lt;/svg&gt;&#13;
&lt;/a&gt;&#13;
&lt;a class='btn btn-invisible circle' onclick='modeSwitch()' title='{{ i18n['switchTheme'] }}' {%- if blogBase['themeMode']=='fix' -%}style='display:none;'{%- endif -%}&gt;&#13;
	&lt;svg class='octicon' width='16' height='16' &gt;&#13;
		&lt;path id='themeSwitch' fill-rule='evenodd'&gt;&lt;/path&gt;&#13;
	&lt;/svg&gt;&#13;
&lt;/a&gt;&#13;
{% endblock %}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
### tag.html 文件&#13;
&#13;
&gt; [!Important]&#13;
&gt; tag 这个模板文件里增加的代码可以应用到搜索页.&#13;
&#13;
1. **打开`tag.html`修改样式, 用了 Diff 代码块, 看着改吧.**&#13;
&#13;
```Diff&#13;
+.title-right{display:flex;align-items:center;flex-direction:column;}&#13;
+.title-right .circle{padding:14px 16px;}&#13;
👆&#13;
-.title-right{display:flex;margin:auto 0 0 auto;}&#13;
-.title-right .circle{padding: 14px 16px;margin-right:8px;}&#13;
```&#13;
&#13;
2. **分离搜索框以及图标.**&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改前&lt;/summary&gt;&#13;
&#13;
```html&#13;
{% block header %}&#13;
&lt;span class='tagTitle'&gt;&lt;span&gt;Loading&lt;/span&gt;&lt;span class='AnimatedEllipsis'&gt;&lt;/span&gt;&lt;/span&gt;&#13;
&lt;div class='title-right'&gt;&#13;
    &lt;div class='subnav-search'&gt;&#13;
        &lt;input type='search' class='form-control subnav-search-input float-left' aria-label='Search site' value='' style='height:32px;'&gt;&#13;
        &lt;button class='btn float-left' type='submit' onclick='javascript:searchShow()'&gt;{{ i18n['Search'] }}&lt;/button&gt;&#13;
        &lt;svg class='subnav-search-icon octicon octicon-search' width='16' height='16' viewBox='0 0 16 16' aria-hidden='true'&gt;&#13;
            &lt;path id='searchSVG' fill-rule='evenodd'&gt;&lt;/path&gt;&#13;
        &lt;/svg&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;a href='{{ blogBase['homeUrl'] }}' id='buttonHome' class='btn btn-invisible circle' title='{{ i18n['home'] }}'&gt;&#13;
        &lt;svg class='octicon' width='16' height='16'&gt;&#13;
            &lt;path id='pathHome' fill-rule='evenodd'&gt;&lt;/path&gt;&#13;
        &lt;/svg&gt;&#13;
    &lt;/a&gt;&#13;
    &lt;a class='btn btn-invisible circle' onclick='modeSwitch()' title='{{ i18n['switchTheme'] }}' {%- if blogBase['themeMode']=='fix' -%}style='display:none;'{%- endif -%}&gt;&#13;
        &lt;svg class='octicon' width='16' height='16' &gt;&#13;
            &lt;path id='themeSwitch' fill-rule='evenodd'&gt;&lt;/path&gt;&#13;
        &lt;/svg&gt;&#13;
    &lt;/a&gt;&#13;
&lt;/div&gt;&#13;
{% endblock %}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
&lt;details&gt;&lt;summary&gt;修改后&lt;/summary&gt;&#13;
&#13;
```html&#13;
{% block header %}&#13;
&lt;span class='tagTitle'&gt;&lt;span&gt;Loading&lt;/span&gt;&lt;span class='AnimatedEllipsis'&gt;&lt;/span&gt;&lt;/span&gt;&#13;
&lt;div class='subnav-search'&gt;&#13;
	&lt;input type='search' class='form-control subnav-search-input float-left' aria-label='Search site' value='' style='height:32px;'&gt;&#13;
	&lt;button class='btn float-left' type='submit' onclick='javascript:searchShow()'&gt;{{ i18n['Search'] }}&lt;/button&gt;&#13;
	&lt;svg class='subnav-search-icon octicon octicon-search' width='16' height='16' viewBox='0 0 16 16' aria-hidden='true'&gt;&#13;
		&lt;path id='searchSVG' fill-rule='evenodd'&gt;&lt;/path&gt;&#13;
	&lt;/svg&gt;&#13;
&lt;/div&gt;&#13;
{% endblock %}&#13;
&#13;
{% block functionBtn %}&#13;
&lt;a href='{{ blogBase['homeUrl'] }}' id='buttonHome' class='btn btn-invisible circle' title='{{ i18n['home'] }}'&gt;&#13;
	&lt;svg class='octicon' width='16' height='16'&gt;&#13;
		&lt;path id='pathHome' fill-rule='evenodd'&gt;&lt;/path&gt;&#13;
	&lt;/svg&gt;&#13;
&lt;/a&gt;&#13;
&lt;a class='btn btn-invisible circle' onclick='modeSwitch()' title='{{ i18n['switchTheme'] }}' {%- if blogBase['themeMode']=='fix' -%}style='display:none;'{%- endif -%}&gt;&#13;
	&lt;svg class='octicon' width='16' height='16' &gt;&#13;
		&lt;path id='themeSwitch' fill-rule='evenodd'&gt;&lt;/path&gt;&#13;
	&lt;/svg&gt;&#13;
&lt;/a&gt;&#13;
{% endblock %}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
#### 修改搜索框样式&#13;
&#13;
1. **定位`.subnav-search`类名. 直接删除这个样式**&#13;
&#13;
2. **定位`.subnav-search-input`类名, 修改以下内容**&#13;
&#13;
```Diff&#13;
+.subnav-search-input{width:160px;}&#13;
+.subnav-search button{padding:5px 8px;}&#13;
👆&#13;
-.subnav-search-input{width:160px;border-top-right-radius:0px;border-bottom-right-radius:0px;}&#13;
-.subnav-search button{padding:5px 8px;border-top-left-radius:0px;border-bottom-left-radius:0px;}&#13;
```&#13;
&#13;
3. 打开`primer.css`, 修改样式&#13;
&#13;
定位`.subnav-search {`, 删除了margin.&#13;
&#13;
```Diff&#13;
+.subnav-search {position: relative;s}&#13;
👆&#13;
-.subnav-search {position: relative;margin-left: 12px}&#13;
```&#13;
&#13;
## 修改[警报强调信息]样式&#13;
&#13;
1. **增加圆角**&#13;
&#13;
打开`Gmeek.py`&#13;
&#13;
定位代码`&lt;style&gt;.markdown-alert{`, 给它增加圆角6px.&#13;
&#13;
`border-radius:6px;`&#13;
&#13;
2. **优化行高显示**&#13;
&#13;
定位`line-height:1;`, 直接删除这个属性.&#13;
&#13;
- 效果图:&#13;
&#13;
![](https://github.com/user-attachments/assets/73b52317-f74e-4cbd-b827-25500588d6ac)&#13;
&#13;
## 优化任务列表样式&#13;
&#13;
具体问题看[#202](https://github.com/Meekdai/Gmeek/issues/202)&#13;
&#13;
打开`Gmeek.py`, 定位`postBase=self.blogBase.copy()`, 在它的下面增加如下代码:&#13;
&#13;
```python&#13;
        # 优化任务列表样式&#13;
        if '&lt;ul class='contains-task-list'&gt;' in post_body:&#13;
            issue['style']=issue['style']+'&lt;style&gt;.contains-task-list{padding-left:0.9em !important;list-style:none}&lt;/style&gt;'&#13;
```&#13;
&#13;
## 页面底部文字增加图标动画&#13;
&#13;
爱心图标动画.&#13;
&#13;
打开`footer.html`&#13;
&#13;
在`&lt;span id='runday'&gt;`前面插入下面一行 SVG 图标.&#13;
&#13;
```html&#13;
&lt;svg viewBox='0 0 1024 1024' xmlns='http://www.w3.org/2000/svg' style='margin-right: 4px;height:18px;vertical-align: bottom;fill: #ff5a5a;'class='animate_heartBeatScale'&gt;&lt;path d='M1017.152 426.592a263.296 263.296 0 0 0-502.304-133.92 263.328 263.328 0 0 0-502.304 133.92s5.152 259.264 505.536 520.096c500.32-260.832 499.072-520.096 499.072-520.096zM282.016 194.976a43.2 43.2 0 1 1 .096 86.4 43.2 43.2 0 0 1-.096-86.4zm-135.04 323.232a45.12 45.12 0 0 1-55.488-31.328 289.472 289.472 0 0 1-10.816-66.592C76.64 313.824 142.24 261.472 145.504 258.88a45.024 45.024 0 0 1 63.2 8.032c15.168 19.488 11.744 47.36-7.328 62.72-2.336 1.952-30.784 27.52-30.592 82.24.096 14.752 2.208 31.616 7.488 50.784a45.12 45.12 0 0 1-31.296 55.552z'/&gt;&lt;/svg&gt;&#13;
```&#13;
&#13;
打开`primer.css`, 直接增加动画 CSS 代码.&#13;
&#13;
&lt;details&gt;&lt;summary&gt;CSS Code&lt;/summary&gt;&#13;
&#13;
```CSS&#13;
@keyframes heartBeatScale  {&#13;
    0% {&#13;
        -webkit-transform: scale(1);&#13;
        transform: scale(1)&#13;
    }&#13;
&#13;
    14% {&#13;
        -webkit-transform: scale(1.3);&#13;
        transform: scale(1.3)&#13;
    }&#13;
&#13;
    28% {&#13;
        -webkit-transform: scale(1);&#13;
        transform: scale(1)&#13;
    }&#13;
&#13;
    42% {&#13;
        -webkit-transform: scale(1.3);&#13;
        transform: scale(1.3)&#13;
    }&#13;
&#13;
    70% {&#13;
        -webkit-transform: scale(1);&#13;
        transform: scale(1)&#13;
    }&#13;
}&#13;
@keyframes heartBeatColor {&#13;
    0%, 28%, 70%, 100% {&#13;
        fill: #ff5a5a; /* 初始颜色 */&#13;
    }&#13;
    14%, 42% {&#13;
        fill: red; /* 放大时颜色变化 */&#13;
    }&#13;
}&#13;
&#13;
.animate_heartBeatScale {&#13;
    animation: heartBeatScale 1.3s infinite ease-in-out, heartBeatColor 1.3s infinite ease-in-out;&#13;
    -webkit-animation: heartBeatScale 1.3s infinite ease-in-out, heartBeatColor 1.3s infinite ease-in-out;&#13;
}&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
转到页脚查看实际效果👉 [点我](#footer2)&#13;
&#13;
# Gmeek-html&#13;
&#13;
Github 由于安全考虑, 是不允许使用 iframe 等标签的, 而且在 issues 插入的图片也会自动转换为 Github 的地址, 为了文章的多样性, 在 Gmeek 的 v2.19 版本中添加了支持 html 标签的功能.&#13;
&#13;
&gt; Gmeek 的默认功能, 可使用这个匹配规则转换不同的 html 效果, 详看 👉 [Gmeek进阶](https://blog.meekdai.com/post/%E3%80%90Gmeek-jin-jie-%E3%80%91-wen-zhang-cha-ru-html-biao-qian.html)&#13;
&#13;
&gt; [!Important]&#13;
&gt; 如果在文章中含有代码块标签并且内容为 Gmeek-html, Action 那边会进行转换导致显示错误, 详情看[#201](https://github.com/Meekdai/Gmeek/issues/201)&#13;
&gt; `gmeek-html`换成小写就不会被匹配到.&#13;
&#13;
# 优化 Gmeek-html, 标签转换匹配&#13;
&#13;
打开`Gmeek.py`, 定位字符串`gmeek-html`&#13;
&#13;
替换成下面的代码:&#13;
&#13;
```python&#13;
        # 给原本的Gmeek-html增加小括号判断:&lt;&gt;, 缩小匹配范围&#13;
        if '&lt;code class='notranslate'&gt;Gmeek-html' in post_body:&#13;
            post_body = re.sub(r'&lt;code class='notranslate'&gt;Gmeek-html(&amp;lt;.*?&amp;gt;)&lt;/code&gt;', lambda match: html.unescape(match.group(1)), post_body, flags=re.DOTALL)&#13;
```&#13;
&#13;
原先匹配的内容为:`&lt;code class='notranslate'&gt;Gmeek-html(.*?)&lt;/code&gt;`,&#13;
&#13;
这种情况下, 如果在 html 中含有行内代码块标签并且内容含有 Gmeek-html, 会导致转换文章内容时出现显示错误,&#13;
&#13;
更改后缩小了匹配范围, 可直接用行内代码块👉`Gmeek-html`让其在文章内正常显示.&#13;
&#13;
# 增加图片转换, 并适配图片懒加载&#13;
&#13;
打开`Gmeek.py`, 定位字符串`Gmeek-html`&#13;
&#13;
在附近任意行增加代码:&#13;
&#13;
```python&#13;
        # 默认情况插入图片情况下的匹配规则&lt;p&gt; -&gt; &lt;a&gt; -&gt;&lt;img&gt;&#13;
        if '&lt;p&gt;&lt;a target='_blank' rel=' in post_body:&#13;
            post_body = re.sub(r'&lt;p&gt;\s*&lt;a[^&gt;]*?href='([^']+)'[^&gt;]*?&gt;&lt;img[^&gt;]*?src='\1'[^&gt;]*?&gt;&lt;/a&gt;\s*&lt;/p&gt;', lambda match: f'&lt;div class='ImgLazyLoad-circle'&gt;&lt;/div&gt;\n&lt;img data-fancybox='gallery' img-src='{match.group(1)}'&gt;', post_body, flags=re.DOTALL)&#13;
&#13;
        # 通用插入图片情况下的匹配规则&lt;a&gt; -&gt;&lt;img&gt;&#13;
        if '&lt;a target='_blank' rel=' in post_body:&#13;
            post_body = re.sub(r'&lt;a[^&gt;]*?href='([^']+)'[^&gt;]*?&gt;&lt;img[^&gt;]*?src='\1'[^&gt;]*?&gt;&lt;/a&gt;',lambda match: f'&lt;div class='ImgLazyLoad-circle'&gt;&lt;/div&gt;\n&lt;img data-fancybox='gallery' img-src='{match.group(1)}'&gt;', post_body, flags=re.DOTALL)&#13;
```&#13;
&#13;
- **使用演示**&#13;
&#13;
在 GitHub markdown 里上传图片, 粘贴&amp;拖拽都行,&#13;
&#13;
然后通过 Actions 转换后实际效果如下, html 里面 img 标签会增加 fancybox 所需的`data-fancybox='gallery'`属性.&#13;
&#13;
![](https://github.com/user-attachments/assets/e2ed0b88-719e-49b4-b8bf-90686e0e29c8)&#13;
&#13;
这样优化后可以在 Github issue 的 Preview 里面直接预览图片, 同时还能防备图床问题导致的图片丢失(`Gmeek-spoilertxt='Github, 稳!'`)&#13;
&#13;
唯一缺点就是当 issues 删除后, 图片也会跟着消失, 无法再被外部引用, 所以删除仓库以及 issues 的时候一定要确保图片先备份哦~&#13;
&#13;
# 添加 Gmeek-spoilertxt - 文字防剧透模糊效果&#13;
&#13;
**默认模糊效果, 反复点击可反复显示或隐藏.**&#13;
&#13;
## 打开 Gmeek.py&#13;
&#13;
1. **增加匹配内容:**&#13;
&#13;
```python&#13;
        if '&lt;code class='notranslate'&gt;Gmeek-spoilertxt' in post_body: &#13;
            post_body = re.sub(r'&lt;code class='notranslate'&gt;Gmeek-spoilertxt='([^']+)'&lt;/code&gt;', lambda match: f'&lt;span class='spoilerText'&gt;{match.group(1)}&lt;/span&gt;', post_body, flags=re.DOTALL)&#13;
```&#13;
&#13;
2. **实际转化后的标签如下:**&#13;
&#13;
```html&#13;
&lt;p&gt;测试剧透 &lt;span class='spoilerText'&gt;剧透内容&lt;/span&gt;&lt;/p&gt;&#13;
```&#13;
&#13;
## 打开 post.html&#13;
&#13;
1. **增加 CSS 样式:**&#13;
&#13;
```CSS&#13;
.spoilerText{filter:blur(5px);-webkit-filter:blur(5px);cursor:pointer;transition:filter .3s ease}&#13;
.spoilerText.clear{filter: none;}&#13;
```&#13;
&#13;
2. **定位`&lt;script&gt;`标签, 在里面增加 JS 代码:**&#13;
&#13;
&gt; [!NOTE]&#13;
&gt; `document.addEventListener('DOMContentLoaded', () =&gt; {`这个监听可以写其它功能的代码进去, 不止剧透效果.&#13;
&#13;
&lt;details&gt;&lt;summary&gt;Javascript Code&lt;/summary&gt;&#13;
&#13;
```Javascript&#13;
document.addEventListener('DOMContentLoaded', () =&gt; {&#13;
	const spoilers = document.querySelectorAll('.spoilerText');&#13;
	spoilers.length &amp;&amp; spoilers.forEach(el =&gt; el.onclick = () =&gt; el.classList.toggle('clear'));&#13;
});&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
3. **markdown 输入:**&#13;
&#13;
```&#13;
测试剧透👉`Gmeek-spoilertxt='666666'`.&#13;
```&#13;
&#13;
4. **实际展示:**&#13;
&#13;
测试剧透👉`Gmeek-spoilertxt='666666'`.&#13;
&#13;
# 添加自定义单篇文章代码&#13;
&#13;
```html&#13;
&lt;span id='busuanzi'&gt;&#13;
:heart:感谢第&lt;span&gt;&lt;/span&gt;小伙伴的&lt;span&gt;&lt;/span&gt;次访问关于页面.&#13;
&lt;/span&gt;&#13;
&#13;
&lt;!-- ##{'script':'&lt;script&gt;document.getElementById('user-content-busuanzi').id='busuanzi_container_site_uv';busuanzi=document.getElementById('busuanzi_container_site_uv');busuanzi.style.display='none';busuanzi.childNodes[1].id='busuanzi_value_site_uv';busuanzi.childNodes[3].id='busuanzi_value_site_pv';&lt;/script&gt;&lt;script async src='//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js'&gt;&lt;/script&gt;','style':'&lt;style&gt;#busuanzi_value_site_uv{color:red}#busuanzi_value_site_pv{color:red}&lt;/style&gt;'}## --&gt;&#13;
```&#13;
&#13;
# 自动展开评论区&#13;
&#13;
打开 post.html,&#13;
&#13;
1. **定位`onclick='openComments()'`, 在 html 结构里删除这个点击绑定.**&#13;
&#13;
2. **定位`function openComments(){`这个函数, 在函数结束外边尾行增加`openComments();`**&#13;
&#13;
# icon 图标&#13;
&#13;
写着备用.&#13;
&#13;
1. **打开 Gmeek.py**&#13;
&#13;
[Primer svg](https://primer.style/foundations/icons/#16px)&#13;
&#13;
定位`IconBase={`&#13;
&#13;
在这个 json 格式里面增加图标路径数值.&#13;
&#13;
```json&#13;
&#13;
    'ThreeBars':'M1 2.75A.75.75 0 0 1 1.75 2h12.5a.75.75 0 0 1 0 1.5H1.75A.75.75 0 0 1 1 2.75Zm0 5A.75.75 0 0 1 1.75 7h12.5a.75.75 0 0 1 0 1.5H1.75A.75.75 0 0 1 1 7.75ZM1.75 12h12.5a.75.75 0 0 1 0 1.5H1.75a.75.75 0 0 1 0-1.5Z',&#13;
    'MoveTop':'M3 2.25a.75.75 0 0 1 .75-.75h8.5a.75.75 0 0 1 0 1.5h-8.5A.75.75 0 0 1 3 2.25Zm5.53 2.97 3.75 3.75a.749.749 0 1 1-1.06 1.06L8.75 7.561v6.689a.75.75 0 0 1-1.5 0V7.561L4.78 10.03a.749.749 0 1 1-1.06-1.06l3.75-3.75a.749.749 0 0 1 1.06 0Z',&#13;
    'MoveBottom':'M7.47 10.78a.749.749 0 0 0 1.06 0l3.75-3.75a.749.749 0 1 0-1.06-1.06L8.75 8.439V1.75a.75.75 0 0 0-1.5 0v6.689L4.78 5.97a.749.749 0 1 0-1.06 1.06l3.75 3.75ZM3.75 13a.75.75 0 0 0 0 1.5h8.5a.75.75 0 0 0 0-1.5h-8.5Z'&#13;
```&#13;
&#13;
# issues相关&#13;
&#13;
## 更改发布时间&#13;
&#13;
如需修改发布时间, 可以在 issues 文章最后一行添加如下代码, 里面的时间是采用时间戳的形式, 可以用这个👉[网站](https://tool.lu/timestamp) 转换.&#13;
&#13;
```html&#13;
&lt;!-- ##{'timestamp':1490764800}## --&gt;&#13;
```&#13;
&#13;
# Issues Label 备份&#13;
&#13;
| Label Name | Color | 效果&#13;
|-|-|-&#13;
| 翻墙 | #cb7b58 | ![](https://img.shields.io/static/v1?label=&amp;message=翻墙&amp;color=cb7b58)&#13;
| 软件 | #5da167 | ![](https://img.shields.io/static/v1?label=&amp;message=软件&amp;color=5da167)&#13;
| 网站 | #7057ff | ![](https://img.shields.io/static/v1?label=&amp;message=网站&amp;color=218155)&#13;
| 日常 | #008672 | ![](https://img.shields.io/static/v1?label=&amp;message=日常&amp;color=008672)&#13;
| 教程 | #0075ca | ![](https://img.shields.io/static/v1?label=&amp;message=教程&amp;color=0075ca)&#13;
| 图片处理 | #4c6cc5 | ![](https://img.shields.io/static/v1?label=&amp;message=图片处理&amp;color=4c6cc5)&#13;
| Anime | #E77AB1 | ![](https://img.shields.io/static/v1?label=&amp;message=Anime&amp;color=E77AB1)&#13;
| Win | #5AB3F3 | ![](https://img.shields.io/static/v1?label=&amp;message=Win&amp;color=5AB3F3)&#13;
| VPS | #5319e7 | ![](https://img.shields.io/static/v1?label=&amp;message=VPS&amp;color=5319e7)&#13;
| JS | #AD3152 | ![](https://img.shields.io/static/v1?label=&amp;message=JS&amp;color=AD3152)&#13;
| CSS | #218155 | ![](https://img.shields.io/static/v1?label=&amp;message=CSS&amp;color=218155)&#13;
| Github | #333333 | ![](https://img.shields.io/static/v1?label=&amp;message=Github&amp;color=333333)&#13;
| CDN | #cb222c | ![](https://img.shields.io/static/v1?label=&amp;message=CDN&amp;color=cb222c)&#13;
| Bug | #D73A4A | ![](https://img.shields.io/static/v1?label=&amp;message=Bug&amp;color=D73A4A)&#13;
| Game | #BC49AB | ![](https://img.shields.io/static/v1?label=&amp;message=Bug&amp;color=BC49AB)&#13;
&#13;
# Readme.md&#13;
&#13;
📄 &gt; 文章总数.&#13;
💬 &gt; 评论总数.&#13;
🌺 &gt; 是统计的所有文章的字符数.&#13;
⏰ &gt; 最后一次 Actions 的时间.。</description><guid isPermaLink="true">https://gjken.github.io/post/1.html</guid><pubDate>Sun, 10 Nov 2024 16:22:46 +0000</pubDate></item></channel></rss>